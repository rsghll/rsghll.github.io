<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2020/09/26/ti-ku/"/>
      <url>2020/09/26/ti-ku/</url>
      
        <content type="html"><![CDATA[<h4 id="1-What-is-the-difference-between-list-and-tuples-in-python-？（-列-表-和-元-组-有-什-么-区-别-）"><a href="#1-What-is-the-difference-between-list-and-tuples-in-python-？（-列-表-和-元-组-有-什-么-区-别-）" class="headerlink" title="1.    What     is    the    difference    between    list    and    tuples    in    python    ？（    列    表    和    元    组    有    什    么    区    别    ?    ）"></a>1.    What     is    the    difference    between    list    and    tuples    in    python    ？（    列    表    和    元    组    有    什    么    区    别    ?    ）</h4><h2 id=""><a href="#" class="headerlink" title=""></a></h2><hr><h4 id="2-What-is-pep-8？（-什-么-是-pep8-）"><a href="#2-What-is-pep-8？（-什-么-是-pep8-）" class="headerlink" title="2.    What     is    pep 8？（    什    么    是    pep8    ?    ）"></a>2.    What     is    pep 8？（    什    么    是    pep8    ?    ）</h4><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><hr><h4 id="3-What-is-PYTHONPATH？（-什-么-是-导-包-路-径-PYTHONPATH-）"><a href="#3-What-is-PYTHONPATH？（-什-么-是-导-包-路-径-PYTHONPATH-）" class="headerlink" title="3.    What    is    PYTHONPATH？（    什    么    是    导    包    路    径    PYTHONPATH    ?    ）"></a>3.    What    is    PYTHONPATH？（    什    么    是    导    包    路    径    PYTHONPATH    ?    ）</h4><hr><h4 id="4-What-are-python-modules-Name-some-commonly-used-built-modules-in-Python？（-什-么-是-模-块，内-置-常-用-模-块-有-哪-些-）"><a href="#4-What-are-python-modules-Name-some-commonly-used-built-modules-in-Python？（-什-么-是-模-块，内-置-常-用-模-块-有-哪-些-）" class="headerlink" title="4.    What     are    python    modules?    Name    some    commonly    used    built    modules    in    Python？（    什    么    是    模    块，内    置    常    用    模    块    有    哪    些    ?    ）"></a>4.    What     are    python    modules?    Name    some    commonly    used    built    modules    in    Python？（    什    么    是    模    块，内    置    常    用    模    块    有    哪    些    ?    ）</h4><hr><h4 id="5-What-are-local-variables-and-global-variables-in-Python-Write-an-example-please-什-么-是-本-地-变-量，全-局-变-量，写-个-例-子"><a href="#5-What-are-local-variables-and-global-variables-in-Python-Write-an-example-please-什-么-是-本-地-变-量，全-局-变-量，写-个-例-子" class="headerlink" title="5.    What    are    local    variables    and    global    variables    in    Python    ?    Write    an    example     please.    (    什    么    是    本    地    变    量，全    局    变    量，写    个    例    子)"></a>5.    What    are    local    variables    and    global    variables    in    Python    ?    Write    an    example     please.    (    什    么    是    本    地    变    量，全    局    变    量，写    个    例    子)</h4><hr><h4 id="6-What-is-init-And-the-difference-between-init-and-new-什-么-是-init-方-法，和-new-方-法-有-什-么-区-别"><a href="#6-What-is-init-And-the-difference-between-init-and-new-什-么-是-init-方-法，和-new-方-法-有-什-么-区-别" class="headerlink" title="6.    What     is    init?    And    the    difference    between    init    and    new?    (    什    么    是    init    方    法，和    new    方    法    有    什    么    区    别    ?    )"></a>6.    What     is    <strong>init</strong>?    And    the    difference    between    <strong>init</strong>    and    <strong>new</strong>?    (    什    么    是    <strong>init</strong>    方    法，和    <strong>new</strong>    方    法    有    什    么    区    别    ?    )</h4><hr><h4 id="7-What-is-a-lambda-function-什-么-是-lambda-表-达-式"><a href="#7-What-is-a-lambda-function-什-么-是-lambda-表-达-式" class="headerlink" title="7.    What     is    a    lambda    function    ?    (    什    么    是    lambda    表    达    式    ?    )"></a>7.    What     is    a    lambda    function    ?    (    什    么    是    lambda    表    达    式    ?    )</h4><hr><h4 id="8-What-is-self-in-Python-self-是-什-么"><a href="#8-What-is-self-in-Python-self-是-什-么" class="headerlink" title="8.    What     is    self    in    Python    ?    (    self    是    什    么    ?    )"></a>8.    What     is    self    in    Python    ?    (    self    是    什    么    ?    )</h4><hr><h4 id="9-How-can-you-randomize-the-items-of-a-list-in-place-in-Python-如-何-打-散-一-个-列-表"><a href="#9-How-can-you-randomize-the-items-of-a-list-in-place-in-Python-如-何-打-散-一-个-列-表" class="headerlink" title="9.    How    can    you    randomize    the    items    of    a    list    in    place    in    Python    ?    (    如    何    打    散    一    个    列    表    ?    )"></a>9.    How    can    you    randomize    the    items    of    a    list    in    place    in    Python    ?    (    如    何    打    散    一    个    列    表    ?    )</h4><hr><h4 id="10-What-are-python-iterators-Write-an-example-please-什-么-是-迭-代-器，写-个-例-子"><a href="#10-What-are-python-iterators-Write-an-example-please-什-么-是-迭-代-器，写-个-例-子" class="headerlink" title="10.    What     are    python    iterators?    Write    an    example    please        (    什    么    是    迭    代    器，写    个    例    子    ?    )"></a>10.    What     are    python    iterators?    Write    an    example    please        (    什    么    是    迭    代    器，写    个    例    子    ?    )</h4><hr><h4 id="11-What-is-the-difference-between-range-amp-xrange-range-和-xrange-有-什-么-区-别"><a href="#11-What-is-the-difference-between-range-amp-xrange-range-和-xrange-有-什-么-区-别" class="headerlink" title="11.    What     is    the    difference    between    range    &amp;    xrange    ?    (    range    和    xrange    有    什    么    区    别    ?    )"></a>11.    What     is    the    difference    between    range    &amp;    xrange    ?    (    range    和    xrange    有    什    么    区    别    ?    )</h4><hr><h4 id="12-What-is-pickling-and-unpickling-python-的-二-进-制-序-列-化-和-反-序-列-化"><a href="#12-What-is-pickling-and-unpickling-python-的-二-进-制-序-列-化-和-反-序-列-化" class="headerlink" title="12.    What     is    pickling    and    unpickling    ?    (    python    的    二    进    制    序    列    化    和    反    序    列    化    ?    )"></a>12.    What     is    pickling    and    unpickling    ?    (    python    的    二    进    制    序    列    化    和    反    序    列    化    ?    )</h4><hr><h4 id="13-What-are-the-generators-in-python-什-么-是-生-成-器"><a href="#13-What-are-the-generators-in-python-什-么-是-生-成-器" class="headerlink" title="13.    What     are    the    generators    in    python    ?    (    什    么    是    生    成    器    ?    )"></a>13.    What     are    the    generators    in    python    ?    (    什    么    是    生    成    器    ?    )</h4><hr><h4 id="14-How-will-you-convert-a-string-to-all-lowercase-如-何-把-字-符-串-装-成-全-小-写"><a href="#14-How-will-you-convert-a-string-to-all-lowercase-如-何-把-字-符-串-装-成-全-小-写" class="headerlink" title="14.    How    will    you    convert    a    string    to    all    lowercase    ?    (    如    何    把    字    符    串    装    成    全    小    写    ?    )"></a>14.    How    will    you    convert    a    string    to    all    lowercase    ?    (    如    何    把    字    符    串    装    成    全    小    写    ?    )</h4><hr><h4 id="15-What-is-the-purpose-of-is-not-and-in-operators-is-and-not-这-些-操-作-符-的-含-义"><a href="#15-What-is-the-purpose-of-is-not-and-in-operators-is-and-not-这-些-操-作-符-的-含-义" class="headerlink" title="15.    What     is    the    purpose    of    is,    not    and    in    operators    ?    (    is    and    not    这    些    操    作    符    的    含    义    ?    )"></a>15.    What     is    the    purpose    of    is,    not    and    in    operators    ?    (    is    and    not    这    些    操    作    符    的    含    义    ?    )</h4><hr><h4 id="16-What-is-the-usage-of-help-and-dir-function-in-Python-help-和-dir-函-数-做-什-么-用-的"><a href="#16-What-is-the-usage-of-help-and-dir-function-in-Python-help-和-dir-函-数-做-什-么-用-的" class="headerlink" title="16.    What     is    the    usage    of    help( )    and    dir( )    function    in    Python    ?    (    help    和    dir    函    数    做    什    么    用    的    ?    )"></a>16.    What     is    the    usage    of    help( )    and    dir( )    function    in    Python    ?    (    help    和    dir    函    数    做    什    么    用    的    ?    )</h4><hr><h4 id="17-What-is-a-dictionary-in-Python-字-典-是-什-么"><a href="#17-What-is-a-dictionary-in-Python-字-典-是-什-么" class="headerlink" title="17.    What     is    a    dictionary    in    Python    ?    (    字    典    是    什    么    ?    )"></a>17.    What     is    a    dictionary    in    Python    ?    (    字    典    是    什    么    ?    )</h4><hr><h4 id="18-What-does-this-mean-args-kwargs-And-why-would-we-use-it-args-和-kwargs-是-什-么-作-用"><a href="#18-What-does-this-mean-args-kwargs-And-why-would-we-use-it-args-和-kwargs-是-什-么-作-用" class="headerlink" title="18.    What     does    this    mean: *args, **kwargs    ?    And    why    would    we    use    it    ?    (    args    和    kwargs    是    什    么    作    用    ?    )"></a>18.    What     does    this    mean: *args, **kwargs    ?    And    why    would    we    use    it    ?    (    args    和    kwargs    是    什    么    作    用    ?    )</h4><hr><h4 id="19-What-does-len-do-len-函-数-做-什-么-的"><a href="#19-What-does-len-do-len-函-数-做-什-么-的" class="headerlink" title="19.    What     does    len( )    do    ?    (    len    函    数    做    什    么    的    ?    )"></a>19.    What     does    len( )    do    ?    (    len    函    数    做    什    么    的    ?    )</h4><hr><h4 id="20-Explain-split-sub-subn-methods-of-“re”-module-in-Python-解-释-一-下-re-模-块-里-的-split-sub-subn-函-数"><a href="#20-Explain-split-sub-subn-methods-of-“re”-module-in-Python-解-释-一-下-re-模-块-里-的-split-sub-subn-函-数" class="headerlink" title="20.    Explain    split( ),sub( ),subn( )    methods    of    “re”    module    in    Python    (    解    释    一    下    re    模    块    里    的    split    sub    subn    函    数    )"></a>20.    Explain    split( ),sub( ),subn( )    methods    of    “re”    module    in    Python    (    解    释    一    下    re    模    块    里    的    split    sub    subn    函    数    )</h4><hr><h4 id="21-What-are-negative-indexes-and-why-are-they-used-什-么-是-负-索-引，为-什-么-使-用-它-们"><a href="#21-What-are-negative-indexes-and-why-are-they-used-什-么-是-负-索-引，为-什-么-使-用-它-们" class="headerlink" title="21.    What     are    negative    indexes    and    why    are    they    used    ?    (    什    么    是    负    索    引，为    什    么    使    用    它    们    ?    )"></a>21.    What     are    negative    indexes    and    why    are    they    used    ?    (    什    么    是    负    索    引，为    什    么    使    用    它    们    ?    )</h4><hr><h4 id="22-How-can-files-be-deleted-in-Python-如-何-在-Python-中-删-除-文-件"><a href="#22-How-can-files-be-deleted-in-Python-如-何-在-Python-中-删-除-文-件" class="headerlink" title="22.    How    can    files    be    deleted    in    Python    ?    (    如    何    在    Python    中    删    除    文    件    ?    )"></a>22.    How    can    files    be    deleted    in    Python    ?    (    如    何    在    Python    中    删    除    文    件    ?    )</h4><hr><h4 id="23-What-advantages-do-NumPy-arrays-offer-over-nested-python-lists-使-用-Numpy-中-的-数-组-比-python-列-表-有-哪-些-好-处"><a href="#23-What-advantages-do-NumPy-arrays-offer-over-nested-python-lists-使-用-Numpy-中-的-数-组-比-python-列-表-有-哪-些-好-处" class="headerlink" title="23.    What    advantages    do    NumPy    arrays    offer    over (nested)    python    lists    ?    (    使    用    Numpy    中    的    数    组    比    python    列    表    有    哪    些    好    处    ?    )"></a>23.    What    advantages    do    NumPy    arrays    offer    over (nested)    python    lists    ?    (    使    用    Numpy    中    的    数    组    比    python    列    表    有    哪    些    好    处    ?    )</h4><hr><h4 id="24-How-to-add-values-to-a-python-array-And-how-to-remove-values-to-a-python-array-数-组-如-何-添-加-一-个-值，移-除-一-个-值"><a href="#24-How-to-add-values-to-a-python-array-And-how-to-remove-values-to-a-python-array-数-组-如-何-添-加-一-个-值，移-除-一-个-值" class="headerlink" title="24.    How    to    add    values    to    a    python    array?    And    how    to    remove    values    to    a    python    array    ?    (    数    组    如    何    添    加    一    个    值，移    除    一    个    值    ?    )"></a>24.    How    to    add    values    to    a    python    array?    And    how    to    remove    values    to    a    python    array    ?    (    数    组    如    何    添    加    一    个    值，移    除    一    个    值    ?    )</h4><hr><h4 id="25-What-is-the-difference-between-deep-and-shallow-copy-深-拷-贝-浅-拷-贝-区-别"><a href="#25-What-is-the-difference-between-deep-and-shallow-copy-深-拷-贝-浅-拷-贝-区-别" class="headerlink" title="25.    What    is    the    difference    between    deep    and    shallow    copy    ?    (    深    拷    贝    浅    拷    贝    区    别    ?    )"></a>25.    What    is    the    difference    between    deep    and    shallow    copy    ?    (    深    拷    贝    浅    拷    贝    区    别    ?    )</h4><hr><h4 id="26-Explain-Inheritance-in-Python-with-an-example-解-释-一-下-Python-中-的-继-承"><a href="#26-Explain-Inheritance-in-Python-with-an-example-解-释-一-下-Python-中-的-继-承" class="headerlink" title="26.    Explain    Inheritance    in    Python    with    an    example    ?    (    解    释    一    下    Python    中    的    继    承    ?    )"></a>26.    Explain    Inheritance    in    Python    with    an    example    ?    (    解    释    一    下    Python    中    的    继    承    ?    )</h4><hr><h4 id="27-What-does-an-object-do-object-是-干-嘛-的"><a href="#27-What-does-an-object-do-object-是-干-嘛-的" class="headerlink" title="27.    What    does    an    object( )    do    ?    (    object( )    是    干    嘛    的    ?    )"></a>27.    What    does    an    object( )    do    ?    (    object( )    是    干    嘛    的    ?    )</h4><hr><h4 id="28-Write-codes-to-implement-a-simple-Singleton-怎-么-实-现-一-个-单-例-模-式"><a href="#28-Write-codes-to-implement-a-simple-Singleton-怎-么-实-现-一-个-单-例-模-式" class="headerlink" title="28.    Write    codes    to    implement    a    simple    Singleton    ?    (    怎    么    实    现    一    个    单    例    模    式    ?    )"></a>28.    Write    codes    to    implement    a    simple    Singleton    ?    (    怎    么    实    现    一    个    单    例    模    式    ?    )</h4><hr><h4 id="29-What-is-Duck-typing-什-么-是-鸭-子-类-型"><a href="#29-What-is-Duck-typing-什-么-是-鸭-子-类-型" class="headerlink" title="29.    What    is    Duck - typing    ?    (    什    么    是    鸭    子    类    型    ?    )"></a>29.    What    is    Duck - typing    ?    (    什    么    是    鸭    子    类    型    ?    )</h4><hr><h4 id="30-What-is-GIL-Coroutine-什-么-是-GIL-什-么-是-携-程"><a href="#30-What-is-GIL-Coroutine-什-么-是-GIL-什-么-是-携-程" class="headerlink" title="30.    What    is    GIL,    Coroutine    ?    (    什    么    是    GIL    什    么    是    携    程    ?    )"></a>30.    What    is    GIL,    Coroutine    ?    (    什    么    是    GIL    什    么    是    携    程    ?    )</h4><hr><h4 id="31-Explain-the-select-poll-and-epoll-and-What-is-Level-trigger-and-Edge-trigger-解-释-select-poll-epoll-是-什-么-也-说-下-什-么-是-水-平-触-发-什-么-是-边-界-触-发"><a href="#31-Explain-the-select-poll-and-epoll-and-What-is-Level-trigger-and-Edge-trigger-解-释-select-poll-epoll-是-什-么-也-说-下-什-么-是-水-平-触-发-什-么-是-边-界-触-发" class="headerlink" title="31.    Explain    the    select,    poll    and    epoll.    and    What    is    Level-trigger    and    Edge-trigger    ?    (    解    释    select    poll    epoll    是    什    么    也    说    下    什    么    是    水    平    触    发    什    么    是    边    界    触    发    ?    )"></a>31.    Explain    the    select,    poll    and    epoll.    and    What    is    Level-trigger    and    Edge-trigger    ?    (    解    释    select    poll    epoll    是    什    么    也    说    下    什    么    是    水    平    触    发    什    么    是    边    界    触    发    ?    )</h4><hr><h4 id="32-Discuss-Django-architecture-说-一-下-django-的-结-构-或-者-架-构"><a href="#32-Discuss-Django-architecture-说-一-下-django-的-结-构-或-者-架-构" class="headerlink" title="32.    Discuss    Django    architecture    .    (    说    一    下    django    的    结    构    或    者    架    构    )"></a>32.    Discuss    Django    architecture    .    (    说    一    下    django    的    结    构    或    者    架    构    )</h4><hr><h4 id="33-Explain-how-you-can-set-up-the-Database-in-Django-Django-中-数-据-库-如-何-配-置，都-设-置-哪-些"><a href="#33-Explain-how-you-can-set-up-the-Database-in-Django-Django-中-数-据-库-如-何-配-置，都-设-置-哪-些" class="headerlink" title="33.    Explain    how    you    can    set    up    the    Database    in    Django    ?    (    Django    中    数    据    库    如    何    配    置，都    设    置    哪    些    ?    )"></a>33.    Explain    how    you    can    set    up    the    Database    in    Django    ?    (    Django    中    数    据    库    如    何    配    置，都    设    置    哪    些    ?    )</h4><hr><h4 id="34-Give-an-example-how-you-can-write-a-VIEW-in-Django-在-Django-你-是-如-何-写-一-个-view"><a href="#34-Give-an-example-how-you-can-write-a-VIEW-in-Django-在-Django-你-是-如-何-写-一-个-view" class="headerlink" title="34.    Give    an    example    how    you    can    write    a    VIEW    in    Django    ?    (    在    Django    你    是    如    何    写    一    个    view    ?    )"></a>34.    Give    an    example    how    you    can    write    a    VIEW    in    Django    ?    (    在    Django    你    是    如    何    写    一    个    view    ?    )</h4><hr><h4 id="35-Explain-the-use-of-session-in-Django-framework-解-释-一-下-django-中-session-的-使-用"><a href="#35-Explain-the-use-of-session-in-Django-framework-解-释-一-下-django-中-session-的-使-用" class="headerlink" title="35.    Explain    the    use    of    session    in    Django    framework    ?    (    解    释    一    下    django    中    session    的    使    用    ?    )"></a>35.    Explain    the    use    of    session    in    Django    framework    ?    (    解    释    一    下    django    中    session    的    使    用    ?    )</h4><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单列模式</title>
      <link href="2020/09/21/dan-lie-mo-shi/"/>
      <url>2020/09/21/dan-lie-mo-shi/</url>
      
        <content type="html"><![CDATA[<ol><li><h3 id="单列模式"><a href="#单列模式" class="headerlink" title="单列模式"></a>单列模式</h3><p>​    单列模式 是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实列存在。当你希望在整个系统中，某个类只能出现一个实列时，单列对象就能派上用场。</p><p>​    其实，python 的模式就是天然的单列模式，应为模块在第一次导入时，会生成.pyc文件。当第二次导入时，就会直接加载.pyc文件，而不会在执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单列对象。</p></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SingLeton</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>singleton <span class="token operator">=</span> SingLeton<span class="token punctuation">(</span><span class="token punctuation">)</span>直接在其他文件中导入此文件中的对象，就是一个单列模式的对象<span class="token keyword">from</span> a <span class="token keyword">import</span> singleton</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORM</title>
      <link href="2020/09/20/django-orm/"/>
      <url>2020/09/20/django-orm/</url>
      
        <content type="html"><![CDATA[<h2 id="Django-ORM"><a href="#Django-ORM" class="headerlink" title="Django ORM"></a>Django ORM</h2><p>Django 模型使用自带的 ORM。</p><p>对象关系映射（Object Relational Mapping，简称 ORM ）用于实现面向对象编程语言里不同类型系统的数据之间的转换。</p><p>ORM 在业务逻辑层和数据库层之间充当了桥梁的作用。</p><p>ORM 是通过使用描述对象和数据库之间的映射的元数据，将程序中的对象自动持久化到数据库中。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/05/django-orm1.png" alt="img"></p><p>使用 ORM 的好处：</p><ul><li>提高开发效率。</li><li>不同数据库可以平滑切换。</li></ul><p>使用 ORM 的缺点：</p><ul><li>ORM 代码转换为 SQL 语句时，需要花费一定的时间，执行效率会有所降低。</li><li>长期写 ORM 代码，会降低编写 SQL 语句的能力。</li></ul><p>ORM 解析过程:</p><ul><li>1、ORM 会将 Python 代码转成为 SQL 语句。</li><li>2、SQL 语句通过 pymysql 传送到数据库服务端。</li><li>3、在数据库中执行 SQL 语句并将结果返回。</li></ul><p>ORM 对应关系表：</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/05/orm-object.png" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 索引结构的实现+事物级别</title>
      <link href="2020/09/19/mysql-suo-yin-jie-gou-de-shi-xian-shi-wu-ji-bie/"/>
      <url>2020/09/19/mysql-suo-yin-jie-gou-de-shi-xian-shi-wu-ji-bie/</url>
      
        <content type="html"><![CDATA[<h3 id="Mysql-索引结构的实现"><a href="#Mysql-索引结构的实现" class="headerlink" title="Mysql 索引结构的实现"></a>Mysql 索引结构的实现</h3><h4 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h4><p>​        索引（Index）是帮助数据库高效获取数据的数据结构。索引是在基于数据库表创建的，他包含一个表中某些列的值以及记录对应的地址，并且把这些值存储在一个数据结构中，最常见的就是使用哈希表，B+树做为索引。</p><h4 id="Mysql-索引的数据结构：B-Tree"><a href="#Mysql-索引的数据结构：B-Tree" class="headerlink" title="Mysql 索引的数据结构：B+Tree"></a>Mysql 索引的数据结构：B+Tree</h4><p>​        索引非常大，不能全部存储到内存中，索引是以索引文件的形式存储在磁盘上，索引查询会产生磁盘I/O的消耗，索引的优劣重要指标就是I/O 的 操作次数。</p><p>​        尽量减少磁盘的 I/O 可以提高效率， </p><p>​    </p><p><strong>Mysql索引的数据结构之所以选择B+树而不是B树，是因为它内节点不存储data，这样一个节点就可以存储更多的key。</strong></p><p><strong>Mysql两个存储引擎MyISAM和InnoDB的索引</strong>区别：</p><p><img src="https://img-blog.csdn.net/20180905234629239?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NDYyMzg3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><img src="https://img-blog.csdn.net/20180905234814946?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NDYyMzg3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>一是主索引的区别，InnoDB的数据文件就是索引文件。而 MyISAM 的索引和数据的分开的。</p><p>二是辅助索引的区别：InnoDB的辅助索引data域存储相应记录主键的值而不是地址，而MYISAM 的辅助索引和主索引没有多大区别。</p><h2 id="MySQL中MyISAM与InnoDB区别及选择"><a href="#MySQL中MyISAM与InnoDB区别及选择" class="headerlink" title="MySQL中MyISAM与InnoDB区别及选择"></a>MySQL中MyISAM与InnoDB区别及选择</h2><table><thead><tr><th><strong>InnoDB</strong></th><th><strong>MyISAM</strong></th></tr></thead><tbody><tr><td>支持事务处理</td><td>不支持事务，回滚将造成不完全回滚，不具有原子性</td></tr><tr><td>支持外键</td><td>不支持外键</td></tr><tr><td>支持行锁</td><td>支持全文搜索</td></tr><tr><td>不保存表的具体行数，扫描表来计算有多少行</td><td>保存表的具体行数,不带where时，直接返回保存的行数</td></tr><tr><td>DELETE 表时，是一行一行的删除</td><td>DELETE 表时，先drop表，然后重建表</td></tr><tr><td>InnoDB中必须包含AUTO_INCREMENT类型字段的索引</td><td>MyISAM中可以使AUTO_INCREMENT类型字段建立联合索引</td></tr><tr><td>表格很难被压缩</td><td>表格可以被压缩</td></tr><tr><td>跨平台可直接拷贝使用</td><td>跨平台不可直接拷贝使用</td></tr></tbody></table><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结</strong>：</h2><p>​     在大数据量，高并发量的互联网业务场景下，对于MyISAM和InnoDB</p><ul><li><p>有where条件，count(*)两个存储引擎性能差不多</p></li><li><p>不要使用全文索引，应当使用《<a href="http://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651959917&amp;idx=1&amp;sn=8faeae7419a756b0c355af2b30c255df&amp;chksm=bd2d07b18a5a8ea75f16f7e98ea897c7e7f47a0441c64bdaef8445a2100e0bdd2a7de99786c0&amp;scene=21#wechat_redirect">索引外置</a>》的设计方案</p></li><li><p>事务影响性能，强一致性要求才使用事务</p></li><li><p>不用外键，由应用程序来保证完整性</p></li><li><p>不命中索引，InnoDB也不能用行锁</p><p>innoDB 是非常适合互联网业务的存储引擎，其多版本并发控制，快照读机制，能够通过读取回滚段中数据的历史版本，在事物读取记录的时候不用加锁，以支持超高的并发。MyISAM 相对简单所以最好在效率上要优于InnoDB。如果系统读多，写少，对原子性要求低的情况下，MyISAM 是最好的选着。且MyISAM 恢复速度快。可直接备份覆盖恢复。如果系统读少，写多的时候，尤其是并发写入高的时候，innoDB就是首选了。</p><p>两种类型都有自己的优点，选着那个完全要看自己的实际选着。</p></li></ul><h2 id="InnoDB-四种事务隔离级别"><a href="#InnoDB-四种事务隔离级别" class="headerlink" title="InnoDB 四种事务隔离级别"></a>InnoDB 四种事务隔离级别</h2><p><strong>InnoDB默认是可重复读的（REPEATABLE READ）</strong></p><p>修改全局默认的事务级别，在my.inf文件的[mysqld]节里类似如下设置该选项（不推荐）</p><pre class=" language-java"><code class="language-java">transaction<span class="token operator">-</span>isolation <span class="token operator">=</span> <span class="token punctuation">{</span>READ<span class="token operator">-</span>UNCOMMITTED <span class="token operator">|</span> READ<span class="token operator">-</span>COMMITTED <span class="token operator">|</span> REPEATABLE<span class="token operator">-</span>READ <span class="token operator">|</span> SERIALIZABLE<span class="token punctuation">}</span></code></pre><p> <strong>四种隔离级别说明</strong></p><table><thead><tr><th align="left">隔离级别</th><th align="left">脏读（Dirty Read）</th><th align="left">不可重复读（NonRepeatable Read）</th><th align="left">幻读（Phantom Read）</th></tr></thead><tbody><tr><td align="left">未提交读（Read uncommitted）</td><td align="left">可能</td><td align="left">可能</td><td align="left">可能</td></tr><tr><td align="left">已提交读（Read committed）</td><td align="left">不可能</td><td align="left">可能</td><td align="left">可能</td></tr><tr><td align="left">可重复读（Repeatable read）</td><td align="left">不可能</td><td align="left">不可能</td><td align="left">可能</td></tr><tr><td align="left">可串行化（SERIALIZABLE）</td><td align="left">不可能</td><td align="left">不可能</td><td align="left">不可能</td></tr></tbody></table><p>脏读 :一个事务读取到另一事务未提交的更新数据</p><p>不可重复读 : 在同一事务中,多次读取同一数据返回的结果有所不同</p><p>幻读 :一个事务读到另一个事务已提交的insert数据</p><p><strong>1.脏读</strong></p><p>A事务读取B事务尚未提交的更改数据，并在这个数据的基础上进行操作，这时候如果事务B回滚，那么A事务读到的数据是不被承认的。例如常见的取款事务和转账事务：<br><img src="https://img-blog.csdn.net/20170731153307604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3RhcmxoMzU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>2.不可重复读</strong></p><p>不可重复读是指A事务读取了B事务已经提交的更改数据。假如A在取款事务的过程中，B往该账户转账100，A两次读取的余额发生不一致。</p><p><strong>3.幻读</strong></p><p>A事务读取B事务提交的新增数据,会引发幻读问题。幻读一般发生在计算统计数据的事务中，例如银行系统在同一个事务中两次统计存款账户的总金额，在两次统计中，刚好新增了一个存款账户，存入了100，这时候两次统计的总金额不一致。<br><img src="https://img-blog.csdn.net/20170731153407212?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3RhcmxoMzU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>注意：不可重复读和幻读的区别是：前者是指读到了已经提交的事务的更改数据（修改或删除），后者是指读到了其他已经提交事务的新增数据。对于这两种问题解决采用不同的办法，防止读到更改数据，只需对操作的数据添加行级锁，防止操作中的数据发生变化；二防止读到新增数据，往往需要添加表级锁，将整张表锁定，防止新增数据（oracle采用多版本数据的方式实现）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限系统</title>
      <link href="2020/09/19/quan-xian-xi-tong/"/>
      <url>2020/09/19/quan-xian-xi-tong/</url>
      
        <content type="html"><![CDATA[<h3 id="权限系统"><a href="#权限系统" class="headerlink" title="权限系统"></a>权限系统</h3><p><strong>ACL</strong> (基于用户的)</p><ol><li><p>ACL 权限系统 （三张表）（古老的权限体系）</p><ol><li>简单方便 只针对用户，（小公司）</li></ol></li></ol><pre class=" language-python"><code class="language-python">用户表：id ，用户名，<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>用户<span class="token operator">-</span>权限table：有用户管理的 就把用户id添加到 这个表里，权限表： 节点表  <span class="token operator">-</span><span class="token operator">-</span> 用户管理，课程管理，标签管理</code></pre><ol start="2"><li>权限系统一开始不是针对角色的，只针对用户的，（大公司不用ACL）</li></ol><h3 id="RBAC-权限系统（角色）"><a href="#RBAC-权限系统（角色）" class="headerlink" title="RBAC  权限系统（角色）"></a><strong>RBAC</strong>  权限系统（角色）</h3><p>​    当人数非常大的，比较庞杂，RBAC就产生出来了</p><pre><code>+ 不针对某个用户授权，针对角色+ 给用户分配某个角色，针对角色授权+ 可以把role_id 放到 jwt里 就不用四表联查了，</code></pre><pre class=" language-python"><code class="language-python">用户表：role_id<span class="token punctuation">(</span>角色id<span class="token punctuation">)</span>用户角色：（一对多不用创建，多对多需要）角色表： 超级管理员，课程管理员，用户管理员角色<span class="token operator">-</span>权限权限表： 用户管理页面 课程管理员，标签管理员</code></pre><h3 id="ABac-权限系统-基于属性"><a href="#ABac-权限系统-基于属性" class="headerlink" title="ABac 权限系统 (基于属性)"></a><strong>ABac</strong> 权限系统 (基于属性)</h3><pre><code> 更加细致</code></pre><p>​    一个工牌 只能上午 10 到 晚上6 能在公司，添加一个属性即可，</p><pre><code>用户表：属性：班主任 10点 教室（任务，时间，地点）属性-权限权限表</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 权限 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="2020/09/18/mysql-yin-qing-todo/"/>
      <url>2020/09/18/mysql-yin-qing-todo/</url>
      
        <content type="html"><![CDATA[<h3 id="mysql-引擎"><a href="#mysql-引擎" class="headerlink" title="mysql 引擎"></a>mysql 引擎</h3><p>​        InnoDB 是事物型数据库首选引擎，支持事物安全表（ACID）,支持锁和外键，innoDB是默认的mysql引擎，</p><ul><li><p>innoDB 给mysql提供了具有提交，回滚和崩溃恢复能力的事物安全存储引擎。</p></li><li><p>innoDB 中存在表锁和行锁，不过行锁是在命中索引的情况下才会起作用。</p></li><li><p>innoDB 支持事物，且支持四种隔离级别（读未提交读，读已提交读，可重复读，串行读），默认的为可重复读。</p></li><li><p>如果要提供提交，回滚，崩溃恢复能力的事物安全（ACID）能力，并要求实现并发控制，innoDB是一个好的选择。</p></li></ul><p>​    <strong>MyISAM存储引擎</strong></p><ul><li>他是在 Web,数据存储和其他应用环境下最常用的存储引擎之一，myisam拥有较高的插入，查询速度。</li><li>myisam 只支持表锁，且不支持事物，在读取数据方面的性能很高。</li><li>如果数据要用来插入和查询记录，则myisam引擎能提供较高的处理效率。</li></ul><p><strong>存储结构</strong></p><p>​    innoDB 和 MYISAM 都是用B+Tree 来存储数据的</p><p><strong>使用哪一种引擎需要灵活选择，一个数据库中多个表可以使用不同引擎可以满足各种性能和实际需求，使用何使的存储引擎，将会提高整个数据库的性能</strong></p><p>​    </p><h3 id="Mysql-的索引"><a href="#Mysql-的索引" class="headerlink" title="Mysql 的索引"></a>Mysql 的索引</h3><p>​      索引是一种用来实现MYSQL 高效获取数据的数据结构。</p><ul><li>我们通常所说的在某个字段上建立索引，意思就是让MYSQL 对该字段一索引这种数据结构来存储，然后查找的时候就有对应的查找算法。</li><li>建索引的根本目的就是为了查找的优化，特别是当数据很庞大的时候，一般的查找算法有顺序结构，折半查找，快速查找等。</li><li>但是每种查找算法都是只能应用于特定的数据结构之上，列入顺序查找依赖于顺序结构，折半查找通过二叉查找树或红黑树实现二分搜索，因此在数据之外，数据库系统还在维护这满足特定查找算法的数据结构。</li><li>这些数据结构以某种方式引用数据，这样就可以在数据结构上实现高级查找算法，这种数据结构就是索引。</li></ul><h3 id="mysql-锁"><a href="#mysql-锁" class="headerlink" title="mysql 锁"></a>mysql 锁</h3><p>​            表级锁：</p><p>​                    </p><pre><code>Todo</code></pre><p>​            行级锁：</p><p>​                排他锁，又称写锁，不能与其他锁并存，如果一个事物获取了该数据的排他锁，不能在加其他锁了，可读可写，不能在加其他锁，但你可以使用简单的查询，</p><p>​                共享锁，也称为读锁，多个事物对同一事物共享一把锁，，只能读不能修改，普通查询不会有任何锁机制</p><p>悲观锁：</p><p>​    悲观锁顾名思义，就是很悲观，每次去拿数据认为数据会被更改，每次拿数据时会上锁，当其他人来拿数据时就会block ，直至拿到锁，传统数据库中的行锁，表锁，读锁，写锁，操作之前会上锁。冲突多时，用悲观锁。</p><p>​    乐观锁：</p><p>​    悲观锁顾名思义，就是很乐观，每次去拿数据认为数据不会被更改，不会上锁，在更新时会判断一下是否有人修改数据，适合多读，提高吞吐量，写比较少，省区锁的开销</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="2020/09/18/gong-han-mo-shi/"/>
      <url>2020/09/18/gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WeiBo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>slef<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'新浪三方登录'</span><span class="token keyword">class</span> <span class="token class-name">DingDing</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>slef<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'钉钉三方登录'</span><span class="token comment" spellcheck="true"># 用那个调那个</span>weibo <span class="token operator">=</span> WeiBo<span class="token punctuation">(</span><span class="token punctuation">)</span>dingding <span class="token operator">=</span> DingDing<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>weibo<span class="token punctuation">)</span></code></pre><ol><li>现在只有两个，明天添加微信，后天做一个QQ等等，我们不知道社交账号什么时候完结，我们就得做无数个类，会被累死，一个两个没问题，N 多个时，就不知实列化那个了，这种方式也可以做，我一千个类判断一下类名就行了，实际上可以，但不好维护，如果是一个调用方，认证部门做三方，如果是支付部门的，他要来调用类，一看这么多类，他就不知道调用那个，就得自己去找，很麻烦。</li><li>这时候就要用设计模式得工厂模式，对对象的创建过程抽象化，让用户指定自己想要得对象，而不必关心对象的实列化过程，换句话说，就是把实列化过程隐藏起来，用户只需要通过固定的接口来调用这个类里边的具体方法，就ok了，不需要考虑调用那个类，怎么实列化对象他就不关心了，跟他没关系了，这样就可以解耦了，降低耦合度，类自己写的，没关系，很好调用，如果是其他人，他就得先熟悉你的代码，这个过程省略，就叫工厂模式，主要降低维护得复杂性，</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 工厂模式</span><span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span><span class="token punctuation">:</span>    @staticmethod <span class="token comment" spellcheck="true"># 不需要实列化，直接调用</span>    <span class="token keyword">def</span> <span class="token function">ThirdLogin</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 不写self 不是类方法</span>        <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'weibo'</span><span class="token punctuation">:</span>            rerurn WieBo<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">'DingDing'</span><span class="token punctuation">:</span> dinding <span class="token operator">=</span> SimpleFactory<span class="token punctuation">.</span>ThirdLogin<span class="token punctuation">(</span><span class="token string">'dingding'</span><span class="token punctuation">)</span></code></pre><ol><li>不需要实列化对象，使用静态方法省略。</li><li>我也不考虑他是那个类里是“顶顶”，我只需要传参，里边的逻辑不用管</li><li>只要给我一个参数，你不用管，我也不用管，我们各自为战，实现了解耦</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Haysatck</title>
      <link href="2020/09/15/haysatck/"/>
      <url>2020/09/15/haysatck/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索引擎原理，Haystack-（倒排索引）原理"><a href="#搜索引擎原理，Haystack-（倒排索引）原理" class="headerlink" title="搜索引擎原理，Haystack （倒排索引）原理"></a>搜索引擎原理，Haystack （倒排索引）原理</h2><ul><li><p>（搜索过程）haystack 还提供一个 包，把分词扔给搜索引擎，告诉我id，haystack 根据id 把对象的集合拿出来</p></li><li><p>Haystack 就是把结构化数据 整成 非结构化数据  喂给收缩引擎。</p></li><li><p>全文检索收索（倒排索引，就是为了提供搜索）</p></li><li><p>中文分词（jieba）</p></li></ul><p>mysql自带模糊查找，效率极低</p><p><img src="C:\Users\YJJ\AppData\Roaming\Typora\typora-user-images\1600158855190.png" alt="1600158855190"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql主从</title>
      <link href="2020/09/15/mysql-zhu-cong-fu-zhi/"/>
      <url>2020/09/15/mysql-zhu-cong-fu-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql-主从复制"><a href="#mysql-主从复制" class="headerlink" title="mysql 主从复制"></a>mysql 主从复制</h2><p>主从复制（也称 AB 复制）允许将来自一个MySQL数据库服务器（主服务器）的数据复制到一个或多个MySQL数据库服务器（从服务器）。</p><blockquote><p>复制是异步的 从站不需要永久连接以接收来自主站的更新。</p></blockquote><p>根据配置，您可以复制数据库中的所有数据库，所选数据库甚至选定的表。</p><p>MySQL中复制的优点包括：</p><ul><li>横向扩展解决方案 - 在多个从站之间分配负载以提高性能。在此环境中，所有写入和更新都必须在主服务器上进行。但是，读取可以在一个或多个从设备上进行。该模型可以提高写入性能（因为主设备专用于更新），同时显着提高了越来越多的从设备的读取速度。</li><li>数据安全性 - 因为数据被复制到从站，并且从站可以暂停复制过程，所以可以在从站上运行备份服务而不会破坏相应的主数据。</li><li>分析 - 可以在主服务器上创建实时数据，而信息分析可以在从服务器上进行，而不会影响主服务器的性能。</li><li>远程数据分发 - 您可以使用复制为远程站点创建数据的本地副本，而无需永久访问主服务器。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/11414906-1e1d8aaa7a86af96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/799/format/webp" alt="img"></p><p><strong>Master 启动</strong>（主机）</p><p>Datechanges : 数据改变</p><ul><li>数据改变会产生一个blog日志（二进制日志）（master 必须生成一个）</li></ul><p><strong>Slave</strong> （从机）</p><ul><li><p>开启一个 i/o thread（i/o线程）不停得读blog日志</p></li><li><p>读回来，并写入到自己得 Replaylog 里   Replaylog 等于 主机里得  Blog</p></li><li><p>从机通过 SQLthread 读取 Replaylog 日志得操作 实现同步</p></li><li><p>如果都是 yes 的 表示链接成功</p><pre class=" language-python"><code class="language-python">         Slave_IO_Running<span class="token punctuation">:</span> Yes        Slave_SQL_Running<span class="token punctuation">:</span> Yes</code></pre></li></ul><blockquote><p>前提是作为主服务器角色的数据库服务器必须开启二进制日志</p></blockquote><ol><li>主服务器上面的任何修改都会通过自己的 I/O tread(I/O 线程)保存在二进制日志 <code>Binary log</code> 里面。</li><li>从服务器上面也启动一个 I/O thread，通过配置好的用户名和密码, 连接到主服务器上面请求读取二进制日志，然后把读取到的二进制日志写到本地的一个<code>Realy log</code>（中继日志）里面。</li><li>从服务器上面同时开启一个 SQL thread 定时检查 <code>Realy log</code>(这个文件也是二进制的)，如果发现有更新立即把更新的内容在本机的数据库上面执行一遍。</li></ol><p>mysql主从:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 新建2个目录, 存放master和slave的配置和数据,</span>cd <span class="token operator">~</span>   <span class="token comment" spellcheck="true"># ~ 代表家目录   /home/你的用户名/</span>mkdir mysql_mastermkdir mysql_slavecd mysql_mastermkdir datacp <span class="token operator">-</span>r <span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d <span class="token punctuation">.</span><span class="token operator">/</span>cd <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>mysql_slavemkdir datacp <span class="token operator">-</span>r <span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d <span class="token punctuation">.</span><span class="token operator">/</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 主机配置和从机配置</span><span class="token comment" spellcheck="true"># 主机配置  /home/python/mysql_master/mysql.conf.d/mysqld.cnf</span><span class="token comment" spellcheck="true"># 端口</span>port <span class="token operator">=</span> <span class="token number">3307</span><span class="token comment" spellcheck="true"># 开启日志</span>general_log_file <span class="token operator">=</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token punctuation">.</span>loggeneral_log <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 主机唯一编号</span>server<span class="token operator">-</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># binlog日志文件</span>log_bin <span class="token operator">=</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token operator">-</span>bin<span class="token punctuation">.</span>log<span class="token comment" spellcheck="true"># 从机配置  /home/python/mysql_slave/mysql.conf.d/mysqld.cnf</span>port <span class="token operator">=</span> <span class="token number">3308</span>general_log <span class="token operator">=</span> <span class="token number">0</span>  server<span class="token operator">-</span>id <span class="token operator">=</span> <span class="token number">2</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 加载mysql的docker镜像到 docker中</span>docker image load <span class="token operator">-</span>i mysql_docker_5722<span class="token punctuation">.</span>tar<span class="token comment" spellcheck="true"># 启动master/slave</span>sudo docker run  <span class="token operator">-</span>d <span class="token operator">-</span><span class="token operator">-</span>name mysql<span class="token operator">-</span>master <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>mysql <span class="token operator">-</span><span class="token operator">-</span>network<span class="token operator">=</span>host <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>python<span class="token operator">/</span>mysql_master<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>python<span class="token operator">/</span>mysql_master<span class="token operator">/</span>mysql<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d mysql<span class="token punctuation">:</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">22</span>sudo docker run  <span class="token operator">-</span>d <span class="token operator">-</span><span class="token operator">-</span>name mysql<span class="token operator">-</span>slave <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>mysql <span class="token operator">-</span><span class="token operator">-</span>network<span class="token operator">=</span>host <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>python<span class="token operator">/</span>mysql_slave<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>python<span class="token operator">/</span>mysql_slave<span class="token operator">/</span>mysql<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d mysql<span class="token punctuation">:</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">22</span><span class="token comment" spellcheck="true"># 测试master/slave  (密码是mysql)</span>mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>pmysql <span class="token operator">-</span>h <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span><span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">3307</span>mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>pmysql <span class="token operator">-</span>h <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span><span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">3308</span><span class="token comment" spellcheck="true"># 导出导入数据</span><span class="token comment" spellcheck="true"># 从主机导出</span>mysqldump <span class="token operator">-</span>uroot <span class="token operator">-</span>pmysql <span class="token operator">-</span>h10<span class="token number">.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span>P3307 <span class="token operator">-</span><span class="token operator">-</span>all<span class="token operator">-</span>databases <span class="token operator">-</span><span class="token operator">-</span>lock<span class="token operator">-</span>all<span class="token operator">-</span>tables <span class="token operator">></span> <span class="token operator">~</span><span class="token operator">/</span>master_db<span class="token punctuation">.</span>sql<span class="token comment" spellcheck="true"># 导入从机</span>mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>pmysql <span class="token operator">-</span>h10<span class="token number">.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span>P3308 <span class="token operator">&lt;</span> <span class="token operator">~</span><span class="token operator">/</span>master_db<span class="token punctuation">.</span>sql</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 配置master</span><span class="token comment" spellcheck="true"># 登录到主机</span>mysql –uroot –p <span class="token operator">-</span>h <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span>P <span class="token number">3307</span><span class="token comment" spellcheck="true"># 创建从机账号</span>GRANT REPLICATION SLAVE ON <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> TO <span class="token string">'slave'</span>@<span class="token string">'%'</span> identified by <span class="token string">'slave'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 刷新权限</span>FLUSH PRIVILEGES<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看二进制日志信息, 记录 文件名 和 偏移量, 后面会用到</span>SHOW MASTER STATUS<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> File             <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> mysql<span class="token operator">-</span>bin<span class="token number">.000001</span> <span class="token operator">|</span>      <span class="token number">154</span> <span class="token operator">|</span>              <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token comment" spellcheck="true"># 配置slave</span><span class="token comment" spellcheck="true"># 登录到从机</span>$ mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>pmysql <span class="token operator">-</span>h10<span class="token number">.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span>P3308<span class="token comment" spellcheck="true"># 从机连接到主机</span>$ change master to master_host<span class="token operator">=</span><span class="token string">'10.211.55.15'</span><span class="token punctuation">,</span> master_port<span class="token operator">=</span><span class="token number">3307</span><span class="token punctuation">,</span> master_user<span class="token operator">=</span><span class="token string">'slave'</span><span class="token punctuation">,</span> master_password<span class="token operator">=</span><span class="token string">'slave'</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span><span class="token punctuation">,</span> master_log_pos<span class="token operator">=</span><span class="token number">154</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 开启从机服务</span>$ start slave<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 展示从机服务状态</span>$ show slave status \Gmysql<span class="token operator">></span> show slave status \G<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">.</span> row <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>               Slave_IO_State<span class="token punctuation">:</span> Waiting <span class="token keyword">for</span> master to send event                  Master_Host<span class="token punctuation">:</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span>                  Master_User<span class="token punctuation">:</span> slave                  Master_Port<span class="token punctuation">:</span> <span class="token number">3307</span>                Connect_Retry<span class="token punctuation">:</span> <span class="token number">60</span>              Master_Log_File<span class="token punctuation">:</span> mysql<span class="token operator">-</span>bin<span class="token number">.000003</span>          Read_Master_Log_Pos<span class="token punctuation">:</span> <span class="token number">722</span>               Relay_Log_File<span class="token punctuation">:</span> ubuntu<span class="token operator">-</span>relay<span class="token operator">-</span>bin<span class="token number">.000002</span>                Relay_Log_Pos<span class="token punctuation">:</span> <span class="token number">320</span>        Relay_Master_Log_File<span class="token punctuation">:</span> mysql<span class="token operator">-</span>bin<span class="token number">.000003</span>             Slave_IO_Running<span class="token punctuation">:</span> Yes            Slave_SQL_Running<span class="token punctuation">:</span> Yes</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 配置django</span>DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'syl'</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'10.211.55.15'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'3307'</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'slave'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'syl'</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'10.211.55.15'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'3308'</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 数据库路由配置</span>DATABASE_ROUTERS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'utils.db_router.MasterSlaveDBRouter'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 编写路由文件</span><span class="token comment" spellcheck="true"># utils/db_router.py</span><span class="token keyword">class</span> <span class="token class-name">MasterSlaveDBRouter</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""数据库读写路由"""</span>    <span class="token keyword">def</span> <span class="token function">db_for_read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model<span class="token punctuation">,</span> <span class="token operator">**</span>hints<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""读"""</span>        <span class="token keyword">return</span> <span class="token string">"slave"</span>    <span class="token keyword">def</span> <span class="token function">db_for_write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model<span class="token punctuation">,</span> <span class="token operator">**</span>hints<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""写"""</span>        <span class="token keyword">return</span> <span class="token string">"default"</span>    <span class="token keyword">def</span> <span class="token function">allow_relation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token operator">**</span>hints<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""是否运行关联操作"""</span>        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS</title>
      <link href="2020/09/15/fastdfs/"/>
      <url>2020/09/15/fastdfs/</url>
      
        <content type="html"><![CDATA[<p>FastDFS 介绍</p><ul><li><h5 id="fastDFS-是以C语言开发的一项开源轻量级分布式文件系统，"><a href="#fastDFS-是以C语言开发的一项开源轻量级分布式文件系统，" class="headerlink" title="fastDFS 是以C语言开发的一项开源轻量级分布式文件系统，"></a>fastDFS 是以C语言开发的一项开源轻量级分布式文件系统，</h5></li><li><h5 id="他对文件进行管理，主要功能有：文件存储，文件同步，文件访问（文件上传-下载）-特别适合以文件为载体的在线服务，如图片网站，视频网站等"><a href="#他对文件进行管理，主要功能有：文件存储，文件同步，文件访问（文件上传-下载）-特别适合以文件为载体的在线服务，如图片网站，视频网站等" class="headerlink" title="他对文件进行管理，主要功能有：文件存储，文件同步，文件访问（文件上传/下载）,特别适合以文件为载体的在线服务，如图片网站，视频网站等"></a>他对文件进行管理，主要功能有：文件存储，文件同步，文件访问（文件上传/下载）,特别适合以文件为载体的在线服务，如图片网站，视频网站等</h5></li><li><p>为互联网量身定制，充分考虑了冗余备份，负载均衡，线性扩展等机制，并注重高可用，高性能等指标，</p></li><li><p>可以帮助我们搭建一套高性能的文件服务器集群，并提供文件上传，下载等服务。</p></li></ul><p><img src="http://static.oschina.net/uploads/img/201204/20230218_pNXn.jpg" alt="img"></p><h2 id="FastDFS-分为"><a href="#FastDFS-分为" class="headerlink" title="FastDFS 分为:"></a>FastDFS 分为:</h2><p>​    <strong>Client ：</strong></p><p>​        客户端：可以是浏览器，docker容器，django 服务</p><p>​    <strong>Tracker 群</strong></p><p>​            +  监控管理 Storage群</p><p>​        <strong>Storage 群</strong></p><pre><code>          - 真正存储文件的地方                - Volume 称为一卷或一组，主从同步差不多，不是主从的概念，都可以写读，但是一个写，会同步给其他节点，</code></pre><p><strong>单个卷的作用</strong>：从读写和容量来考虑，读取性能变高没，写入的性能变高没，容量变大没</p><ul><li>一个卷  写入并没有变高，写一个文件，另一个机器必须的在写一次</li><li>读的性能会变高，可以一次读取十个</li><li>容量没有变大，以为会重复文件，文件都一样</li></ul><p><strong>Storage 集群</strong></p><ul><li>写入卷一和卷二，文件被分片，就会加强写入和容量，读取也被扩展，</li><li>动态扩展，高可用（卷一机器坏了，还有其他机器），高性能，可扩展</li></ul><h2 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h2><ul><li>（写入那个，读那个）没有核心节点， 直接跟卷里的某个机器读写，（先确定机器）</li><li>首先先确定跟那个机器读写，必须跟Traker 群（交互）确定，</li><li>​    客户要读那个文件，Tracker（与集群有交互，知道集群在干嘛） 就告诉你取第二个机器去读，</li><li>Tracker 看谁闲，告诉你你就找谁</li></ul><p>fastdfs集群:</p><p>​     注意: 一定要删除  /var/fdfs/ 目录下的文件 (此目录下的文件包含旧的配置, 会造成服务无法访问)</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 加载docker镜像</span>sudo docker load <span class="token operator">-</span>i fastdfs_docker<span class="token punctuation">.</span>tar<span class="token comment" spellcheck="true"># 启动tracker</span>sudo docker run <span class="token operator">-</span>dit <span class="token operator">-</span><span class="token operator">-</span>name tracker <span class="token operator">-</span><span class="token operator">-</span>network<span class="token operator">=</span>host <span class="token operator">-</span>v <span class="token operator">/</span>var<span class="token operator">/</span>fdfs<span class="token operator">/</span>tracker<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>fdfs delron<span class="token operator">/</span>fastdfs tracker<span class="token comment" spellcheck="true"># 启动storage</span>sudo docker run <span class="token operator">-</span>dti <span class="token operator">-</span><span class="token operator">-</span>name storage <span class="token operator">-</span><span class="token operator">-</span>network<span class="token operator">=</span>host <span class="token operator">-</span>e TRACKER_SERVER<span class="token operator">=</span><span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">22122</span> <span class="token operator">-</span>v <span class="token operator">/</span>var<span class="token operator">/</span>fdfs<span class="token operator">/</span>storage<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>fdfs delron<span class="token operator">/</span>fastdfs storage<span class="token comment" spellcheck="true"># http://10.211.55.15:8888/  这是 storage的访问地址</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 安装依赖</span>pip install py3Fdfs<span class="token operator">==</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">0</span>pip install mutagen<span class="token operator">==</span><span class="token number">1.45</span><span class="token punctuation">.</span><span class="token number">1</span>pip install requests<span class="token operator">==</span><span class="token number">2.22</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token comment" spellcheck="true"># 增加目录</span><span class="token comment" spellcheck="true"># /utils/fdfs/</span><span class="token comment" spellcheck="true"># 增加配置文件 </span><span class="token comment" spellcheck="true"># /utils/fdfs/client.conf</span>connect_timeout<span class="token operator">=</span><span class="token number">30</span>network_timeout<span class="token operator">=</span><span class="token number">120</span><span class="token comment" spellcheck="true"># the base path to store log files</span>base_path<span class="token operator">=</span><span class="token operator">~</span><span class="token operator">/</span>Desktop<span class="token comment" spellcheck="true"># ip:port</span>tracker_server<span class="token operator">=</span><span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">22122</span>log_level<span class="token operator">=</span>infouse_connection_pool <span class="token operator">=</span> falseconnection_pool_max_idle_time <span class="token operator">=</span> <span class="token number">3600</span>load_fdfs_parameters_from_tracker<span class="token operator">=</span>falseuse_storage_id <span class="token operator">=</span> falsestorage_ids_filename <span class="token operator">=</span> storage_ids<span class="token punctuation">.</span>confhttp<span class="token punctuation">.</span>tracker_server_port<span class="token operator">=</span><span class="token number">80</span><span class="token comment" spellcheck="true"># 测试fastdfs客户端</span><span class="token comment" spellcheck="true"># /utils/fdfs/test.py</span><span class="token keyword">from</span> fdfs_client<span class="token punctuation">.</span>client <span class="token keyword">import</span> get_tracker_conf<span class="token punctuation">,</span> Fdfs_client<span class="token keyword">from</span> syl<span class="token punctuation">.</span>settings <span class="token keyword">import</span> FDFS_CONF_PATH<span class="token comment" spellcheck="true"># 1. 获取配置文件</span>conf <span class="token operator">=</span> get_tracker_conf<span class="token punctuation">(</span>conf_path<span class="token operator">=</span>FDFS_CONF_PATH<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 创建FastDFS客户端实例</span>client <span class="token operator">=</span> Fdfs_client<span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 调用FastDFS客户端上传文件方法,</span>ret <span class="token operator">=</span> client<span class="token punctuation">.</span>upload_by_filename<span class="token punctuation">(</span><span class="token string">'/Users/mac/Pictures/0.jpg'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 自定义存储后端</span><span class="token comment" spellcheck="true"># utils/fdfs/my_storage.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>files<span class="token punctuation">.</span>storage <span class="token keyword">import</span> Storage<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> fdfs_client<span class="token punctuation">.</span>client <span class="token keyword">import</span> Fdfs_client<span class="token punctuation">,</span> get_tracker_conf<span class="token keyword">class</span> <span class="token class-name">MyStorage</span><span class="token punctuation">(</span>Storage<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>base_url <span class="token operator">=</span> settings<span class="token punctuation">.</span>FDFS_BASE_URL    <span class="token keyword">def</span> <span class="token function">_open</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">_save</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 返回 真实存储的 文件名</span>        <span class="token comment" spellcheck="true"># 1. 读取配置文件</span>        conf <span class="token operator">=</span> get_tracker_conf<span class="token punctuation">(</span>conf_path<span class="token operator">=</span>settings<span class="token punctuation">.</span>FDFS_CONF_PATH<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 2. 创建FastDFS客户端实例</span>        client <span class="token operator">=</span> Fdfs_client<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3. 调用FastDFS客户端上传文件方法</span>        ret <span class="token operator">=</span> client<span class="token punctuation">.</span>upload_by_buffer<span class="token punctuation">(</span>content<span class="token punctuation">.</span>file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret<span class="token punctuation">[</span><span class="token string">'Remote file_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>base_url <span class="token operator">+</span> name    <span class="token keyword">def</span> <span class="token function">exists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 配置 fastdfs</span><span class="token comment" spellcheck="true"># fasfdfs 服务器地址</span>FDFS_BASE_URL <span class="token operator">=</span> <span class="token string">'http://10.211.55.15:8888/'</span>FDFS_CONF_PATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'utils/fdfs/client.conf'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改系统默认的文件管理类</span>DEFAULT_FILE_STORAGE <span class="token operator">=</span> <span class="token string">'utils.fdfs.my_storage.MyStorage'</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器缓存一个函数的结果</title>
      <link href="2020/09/14/zhuang-shi-qi-shi-xian-yi-ge-huan-cun/"/>
      <url>2020/09/14/zhuang-shi-qi-shi-xian-yi-ge-huan-cun/</url>
      
        <content type="html"><![CDATA[<h3 id="实现一个简单的装饰器-用来对某个函数的结果进行缓存"><a href="#实现一个简单的装饰器-用来对某个函数的结果进行缓存" class="headerlink" title="实现一个简单的装饰器,用来对某个函数的结果进行缓存"></a>实现一个简单的装饰器,用来对某个函数的结果进行缓存</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> picklecache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">is_obsolete</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 判断缓存是否过期，返回True则过期</span>    d <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> entry<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> d <span class="token operator">></span> duration<span class="token keyword">def</span> <span class="token function">compute_key</span><span class="token punctuation">(</span>function<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将传入的参数序列化</span>    key <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">memoize</span><span class="token punctuation">(</span>duration<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 装饰器中缓存时间默认为10秒</span>    <span class="token keyword">def</span> <span class="token function">_memorize</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第二层传函数</span>        <span class="token keyword">def</span> <span class="token function">__memorize</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第三层传入非固定参数</span>            key <span class="token operator">=</span> compute_key<span class="token punctuation">(</span>function<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span>            <span class="token keyword">if</span> key <span class="token keyword">in</span> cache <span class="token operator">and</span> <span class="token operator">not</span> is_obsolete<span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'we got a winner'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'  '</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 如果缓存中有，就直接返回缓存过的结果</span>            result <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'value'</span><span class="token punctuation">:</span> result<span class="token punctuation">,</span> <span class="token string">'time'</span><span class="token punctuation">:</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span>            <span class="token keyword">return</span> result        <span class="token keyword">return</span> __memorize    <span class="token keyword">return</span> _memorize@memoize<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">complex</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    a<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入a: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入b: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>complex<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/09/14/django-flask/"/>
      <url>2020/09/14/django-flask/</url>
      
        <content type="html"><![CDATA[<h2 id="Django-amp-Flask"><a href="#Django-amp-Flask" class="headerlink" title="Django&amp;Flask"></a>Django&amp;Flask</h2><p><strong>Django</strong>走的是大而全的方向，开发效率高。它的MTV框架，自带ORM，admin后台管理，自带的sqlite数据库和开发测试用的服务器，给开发者提高了开发效率。重量级的web框架，功能齐全，提供一站式的解决思路，能让开发者不用在选择上花费大量的时间。<br>自带ORM和模板引擎，支持jinja等非官方模板引擎。<br>自带ORM使Django和关系型数据库耦合度高，如果要使用非关系型数据库，需要使用第三方库。<br>自带数据库管理app。<br>成熟稳定，开发效率高，相对于Flask，Django的整体封闭性比较好，适合做企业级网站的开发。python web框架的先驱，第三方库丰富。<br><strong>Flask</strong>是轻量级的框架，自由灵活，可扩展性，核心基于Werkzeug WSGI工具和jinja2模板引擎<br>适合做小网站以及web服务的API，开发大型网站无压力，但是架构需要自己设计。<br>与关系型数据库的结合不弱于Django，而与非关系型数据库的结合远远优于Django。<br><strong>WSGI</strong>： web服务器网关接口，是一套协议。用于接收用户请求并将请求进行初次封装，然后将请求交给web框架。<br>实现wsgi协议的模块：wsgiref本质上就是编写——socket服务端，用于接受用户请求（django）<br>werkzeug,本质上就是编写一个sock服务端，用于接收用户请求（django）<br><strong>uwsgi</strong>：与WSGI一样是一种通信协议，它是uWSGI服务器的独占协议，用于定义传输信息的类型。<br><strong>uWSGI</strong>：是一个web服务器，实现了WSGI的协议，uWSGI协议，http协议。<br>CORS和CSRF的区别？<br><strong>CORS</strong>是一个W3C标准，全称是“跨域资源共享”（Cross-origin resoure sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了Ajax只能同源使用的限制。<br><strong>CSRF</strong>主流防御方式是在后端生产表单的时候生成一串随机token，内置到表单里成为一个字段，同时，将此串token置入session中。每次表单提交到后端时都会检查这两个值是否一致，以此来判断此次表单提交是否可信，提交过一次之后，如果这个页面没有生成CSRF token，那么token将会被清空。如果有新的需求，那么token会被更新。攻击者可以伪造POST表单提交，但是他没有后端生成的内置于表单的token，session中没有token都无济于事。<br><strong>nginx</strong> 是一个开源的高性能的HTTP服务器和反向代理：<br>1.作为web服务器，它处理静态文件和索引文件效果非常高；<br>2.它的设计非常注重效率，最大支持5万个并发连接，但只占用很少的内存空间；<br>3.稳定性高，配置简洁；<br>4.强大的反向代理和负载均衡功能，平衡集群中各个服务器的负载压力应用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ能为你做些什么？</title>
      <link href="2020/09/13/rabbitmq-neng-zuo-shi-me/"/>
      <url>2020/09/13/rabbitmq-neng-zuo-shi-me/</url>
      
        <content type="html"><![CDATA[<h2 id="RabbitMQ能为你做些什么？"><a href="#RabbitMQ能为你做些什么？" class="headerlink" title="RabbitMQ能为你做些什么？"></a>RabbitMQ能为你做些什么？</h2><p><strong>消息队列中间件是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。目前使用较多的消息队列有ActiveMQ，RabbitMQ，ZeroMQ，Kafka，MetaMQ，RocketMQ。</strong></p><p><strong>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。</strong></p><p><strong>rabbitMQ是一款基于AMQP协议的消息中间件，它能够在应用之间提供可靠的消息传输。在易用性，扩展性，高可用性上表现优秀。使用消息中间件利于应用之间的解耦，生产者（客户端）无需知道消费者（服务端）的存在。而且两端可以使用不同的语言编写，大大提供了灵活性。</strong></p><p><strong>消息系统允许软件、应用相互连接和扩展．这些应用可以相互链接起来组成一个更大的应用，或者将用户设备和数据进行连接．消息系统通过将消息的发送和接收分离来实现应用程序的异步和解偶．</strong></p><p>或许你正在考虑进行数据投递，非阻塞操作或推送通知。或许你想要实现发布／订阅，异步处理，或者工作队列。所有这些都可以通过消息系统实现。</p><p>RabbitMQ是一个消息代理 - 一个消息系统的媒介。它可以为你的应用提供一个通用的消息发送和接收平台，并且保证消息在传输过程中的安全。</p><h2 id="技术亮点"><a href="#技术亮点" class="headerlink" title="技术亮点"></a>技术亮点</h2><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>RabbitMQ提供了多种技术可以让你在性能和可靠性之间进行权衡。这些技术包括持久性机制、投递确认、发布者证实和高可用性机制。</p><h3 id="灵活的路由"><a href="#灵活的路由" class="headerlink" title="灵活的路由"></a>灵活的路由</h3><p>消息在到达队列前是通过交换机进行路由的。RabbitMQ为典型的路由逻辑提供了多种内置交换机类型。如果你有更复杂的路由需求，可以将这些交换机组合起来使用，你甚至可以实现自己的交换机类型，并且当做RabbitMQ的插件来使用。</p><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>在相同局域网中的多个RabbitMQ服务器可以聚合在一起，作为一个独立的逻辑代理来使用。</p><h3 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h3><p>对于服务器来说，它比集群需要更多的松散和非可靠链接。为此RabbitMQ提供了联合模型。</p><h3 id="高可用的队列"><a href="#高可用的队列" class="headerlink" title="高可用的队列"></a>高可用的队列</h3><p>在同一个集群里，队列可以被镜像到多个机器中，以确保当其中某些硬件出现故障后，你的消息仍然安全。</p><h3 id="多协议"><a href="#多协议" class="headerlink" title="多协议"></a>多协议</h3><p>RabbitMQ 支持多种消息协议的消息传递。</p><h3 id="广泛的客户端"><a href="#广泛的客户端" class="headerlink" title="广泛的客户端"></a>广泛的客户端</h3><p>只要是你能想到的编程语言几乎都有与其相适配的RabbitMQ客户端。</p><h3 id="可视化管理工具"><a href="#可视化管理工具" class="headerlink" title="可视化管理工具"></a>可视化管理工具</h3><p>RabbitMQ附带了一个易于使用的可视化管理工具，它可以帮助你监控消息代理的每一个环节。</p><h3 id="追踪"><a href="#追踪" class="headerlink" title="追踪"></a>追踪</h3><p>如果你的消息系统有异常行为，RabbitMQ还提供了追踪的支持，让你能够发现问题所在。</p><h3 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h3><p>RabbitMQ附带了各种各样的插件来对自己进行扩展。你甚至也可以写自己的插件来使用。</p><h2 id="还有什么呢…"><a href="#还有什么呢…" class="headerlink" title="还有什么呢…"></a>还有什么呢…</h2><h3 id="商业支持"><a href="#商业支持" class="headerlink" title="商业支持"></a>商业支持</h3><p>可以提供商业支持，包括培训和咨询。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis集群</title>
      <link href="2020/09/12/redis-ji-qun/"/>
      <url>2020/09/12/redis-ji-qun/</url>
      
        <content type="html"><![CDATA[<h4 id="redis集群"><a href="#redis集群" class="headerlink" title="redis集群:"></a>redis集群:</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建集群, 启动6个redis实例, 集群至少要3个节点, 每个节点必须是主从结构</span><span class="token comment" spellcheck="true"># 配置如下:  复制6份, 修改端口号</span>port <span class="token number">7000</span>  <span class="token comment" spellcheck="true"># 端口</span>bind <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span>   <span class="token comment" spellcheck="true"># 这里换成自己的ip</span>daemonize yes  <span class="token comment" spellcheck="true"># 后台运行, 不占用终端</span>pidfile <span class="token number">7000.</span>pid  <span class="token comment" spellcheck="true"># pid保存文件名</span>cluster<span class="token operator">-</span>enabled yes  <span class="token comment" spellcheck="true"># 集群模式</span>cluster<span class="token operator">-</span>config<span class="token operator">-</span>file 7000_node<span class="token punctuation">.</span>conf  <span class="token comment" spellcheck="true"># 集群配置保存文件名</span>cluster<span class="token operator">-</span>node<span class="token operator">-</span>timeout <span class="token number">15000</span>  <span class="token comment" spellcheck="true"># 节点超时时间(毫秒)</span>appendonly yes  <span class="token comment" spellcheck="true"># 所有的写操作都追加到日志中</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 启动6个redis节点</span>redis<span class="token operator">-</span>server <span class="token number">7000.</span>confredis<span class="token operator">-</span>server <span class="token number">7001.</span>confredis<span class="token operator">-</span>server <span class="token number">7002.</span>confredis<span class="token operator">-</span>server <span class="token number">7003.</span>confredis<span class="token operator">-</span>server <span class="token number">7004.</span>confredis<span class="token operator">-</span>server <span class="token number">7005.</span>conf</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 复制 集群管理工具 到系统路径, 方便调用工具</span>sudo cp <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>doc<span class="token operator">/</span>redis<span class="token operator">-</span>tools<span class="token operator">/</span>examples<span class="token operator">/</span>redis<span class="token operator">-</span>trib<span class="token punctuation">.</span>rb <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span><span class="token comment" spellcheck="true"># 使用集群配置工具, 把6个节点配置成集群模式,  --replicas 1 表示每个主节点有一个从节点</span>redis<span class="token operator">-</span>trib<span class="token punctuation">.</span>rb create <span class="token operator">-</span><span class="token operator">-</span>replicas <span class="token number">1</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7000</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7001</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7002</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7003</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7004</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7005</span><span class="token comment" spellcheck="true"># 使用命令行工具测试集群</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>c <span class="token operator">-</span>h <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span>p <span class="token number">7000</span>   <span class="token comment" spellcheck="true"># -c 表示集群模式</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 安装依赖包</span>django<span class="token operator">-</span>cluster<span class="token operator">-</span>redis<span class="token operator">==</span> <span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">5</span>django<span class="token operator">-</span>redis<span class="token operator">==</span> <span class="token number">4.10</span><span class="token punctuation">.</span><span class="token number">0</span>redis<span class="token operator">==</span> <span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 注意这个版本</span>redis<span class="token operator">-</span>py<span class="token operator">-</span>cluster<span class="token operator">==</span> <span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">0</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 配置cache</span>CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django_redis.cache.RedisCache'</span><span class="token punctuation">,</span>        <span class="token string">'LOCATION'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"redis://10.211.55.15:7000"</span><span class="token punctuation">,</span>            <span class="token string">"redis://10.211.55.15:7001"</span><span class="token punctuation">,</span>            <span class="token string">"redis://10.211.55.15:7002"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'REDIS_CLIENT_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rediscluster.RedisCluster'</span><span class="token punctuation">,</span>            <span class="token string">'CONNECTION_POOL_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rediscluster.connection.ClusterConnectionPool'</span><span class="token punctuation">,</span>            <span class="token string">"CONNECTION_POOL_KWARGS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"decode_responses"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 测试django-redis 集群模式, 集群模式不支持切换库编号</span><span class="token keyword">from</span> django_redis <span class="token keyword">import</span> get_redis_connectionredis_client <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token punctuation">)</span>redis_client<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'祖安人'</span><span class="token punctuation">)</span>redis_client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相思啊！</title>
      <link href="2020/09/12/xiang-si/"/>
      <url>2020/09/12/xiang-si/</url>
      
        <content type="html"><![CDATA[<h3 id="相思"><a href="#相思" class="headerlink" title="相思"></a>相思</h3><p><a href="https://hanyu.baidu.com/s?wd=%E7%8E%8B%E7%BB%B4">                        【作者】王维 </a>【朝代】唐</p><p>红豆生南国，春来发几枝。</p><p>愿君多采撷，此物最相思。</p><p>标签:   <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E6%83%85%E6%84%9F">情感</a>    <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E5%92%8F%E7%89%A9">咏物</a>     <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E5%94%90%E8%AF%97%E4%B8%89%E7%99%BE%E9%A6%96">唐诗三百首</a>    <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E6%80%9D%E5%BF%B5">思念</a>    <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E6%8A%92%E6%83%85">抒情</a></p><p><a href="javascript:"><strong>译文</strong></a> <a href="javascript:"><strong>注释</strong></a></p><p>鲜红浑圆的红豆，生长在阳光明媚的南方，春暖花开的季节，不知又生出多少？希望思念的人儿多多采集，小小红豆引人相思。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 诗词歌赋 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/12/hello-world/"/>
      <url>2020/09/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
