<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FastDFS</title>
      <link href="2020/09/15/fastdfs/"/>
      <url>2020/09/15/fastdfs/</url>
      
        <content type="html"><![CDATA[<ol><li><p>FastDFS 介绍</p><ul><li><h5 id="fastDFS-是以C语言开发的一项开源轻量级分布式文件系统，"><a href="#fastDFS-是以C语言开发的一项开源轻量级分布式文件系统，" class="headerlink" title="fastDFS 是以C语言开发的一项开源轻量级分布式文件系统，"></a>fastDFS 是以C语言开发的一项开源轻量级分布式文件系统，</h5></li><li><h5 id="他对文件进行管理，主要功能有：文件存储，文件同步，文件访问（文件上传-下载）-特别适合以文件为载体的在线服务，如图片网站，视频网站等"><a href="#他对文件进行管理，主要功能有：文件存储，文件同步，文件访问（文件上传-下载）-特别适合以文件为载体的在线服务，如图片网站，视频网站等" class="headerlink" title="他对文件进行管理，主要功能有：文件存储，文件同步，文件访问（文件上传/下载）,特别适合以文件为载体的在线服务，如图片网站，视频网站等"></a>他对文件进行管理，主要功能有：文件存储，文件同步，文件访问（文件上传/下载）,特别适合以文件为载体的在线服务，如图片网站，视频网站等</h5></li><li><p>为互联网量身定制，充分考虑了冗余备份，负载均衡，线性扩展等机制，并注重高可用，高性能等指标，</p></li><li><p>可以帮助我们搭建一套高性能的文件服务器集群，并提供文件上传，下载等服务。</p></li></ul></li></ol><p><img src="http://static.oschina.net/uploads/img/201204/20230218_pNXn.jpg" alt="img"></p><h2 id="FastDFS-分为"><a href="#FastDFS-分为" class="headerlink" title="FastDFS 分为:"></a>FastDFS 分为:</h2><p>​    <strong>Client ：</strong></p><p>​        客户端：可以是浏览器，docker容器，django服务</p><p>​    <strong>Tracker 群</strong></p><p>​            +  监控管理 Storage群</p><p>​        <strong>Storage 群</strong></p><pre><code>          - 真正存储文件的地方                - Volume 称为一卷或一组，主从同步差不多，不是主从的概念，都可以写读，但是一个写，会同步给其他节点，</code></pre><p><strong>单个卷的作用</strong>：从读写和容量来考虑，读取性能变高没，写入的性能变高没，容量变大没</p><ul><li>一个卷  写入并没有变高，写一个文件，另一个机器必须的在写一次</li><li>读的性能会变高，可以一次读取十个</li><li>容量没有变大，以为会重复文件，文件都一样</li></ul><p><strong>Storage 集群</strong></p><ul><li>写入卷一和卷二，文件被分片，就会加强写入和容量，读取也被扩展，</li><li>动态扩展，高可用（卷一机器坏了，还有其他机器），高性能，可扩展</li></ul><h2 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h2><ul><li>（写入那个，读那个）没有核心节点， 直接跟卷里的某个机器读写，（先确定机器）</li><li>首先先确定跟那个机器读写，必须跟Traker 群（交互）确定，</li><li>​    客户要读那个文件，Tracker（与集群有交互，知道集群在干嘛） 就告诉你取第二个机器去读，</li><li>Tracker 看谁闲，告诉你你就找谁</li></ul><p>fastdfs集群:</p><ul><li>注意: 一定要删除  /var/fdfs/ 目录下的文件 (此目录下的文件包含旧的配置, 会造成服务无法访问)</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 加载docker镜像</span>sudo docker load <span class="token operator">-</span>i fastdfs_docker<span class="token punctuation">.</span>tar<span class="token comment" spellcheck="true"># 启动tracker</span>sudo docker run <span class="token operator">-</span>dit <span class="token operator">-</span><span class="token operator">-</span>name tracker <span class="token operator">-</span><span class="token operator">-</span>network<span class="token operator">=</span>host <span class="token operator">-</span>v <span class="token operator">/</span>var<span class="token operator">/</span>fdfs<span class="token operator">/</span>tracker<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>fdfs delron<span class="token operator">/</span>fastdfs tracker<span class="token comment" spellcheck="true"># 启动storage</span>sudo docker run <span class="token operator">-</span>dti <span class="token operator">-</span><span class="token operator">-</span>name storage <span class="token operator">-</span><span class="token operator">-</span>network<span class="token operator">=</span>host <span class="token operator">-</span>e TRACKER_SERVER<span class="token operator">=</span><span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">22122</span> <span class="token operator">-</span>v <span class="token operator">/</span>var<span class="token operator">/</span>fdfs<span class="token operator">/</span>storage<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>fdfs delron<span class="token operator">/</span>fastdfs storage<span class="token comment" spellcheck="true"># http://10.211.55.15:8888/  这是 storage的访问地址</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 安装依赖</span>pip install py3Fdfs<span class="token operator">==</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">0</span>pip install mutagen<span class="token operator">==</span><span class="token number">1.45</span><span class="token punctuation">.</span><span class="token number">1</span>pip install requests<span class="token operator">==</span><span class="token number">2.22</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token comment" spellcheck="true"># 增加目录</span><span class="token comment" spellcheck="true"># /utils/fdfs/</span><span class="token comment" spellcheck="true"># 增加配置文件 </span><span class="token comment" spellcheck="true"># /utils/fdfs/client.conf</span>connect_timeout<span class="token operator">=</span><span class="token number">30</span>network_timeout<span class="token operator">=</span><span class="token number">120</span><span class="token comment" spellcheck="true"># the base path to store log files</span>base_path<span class="token operator">=</span><span class="token operator">~</span><span class="token operator">/</span>Desktop<span class="token comment" spellcheck="true"># ip:port</span>tracker_server<span class="token operator">=</span><span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">22122</span>log_level<span class="token operator">=</span>infouse_connection_pool <span class="token operator">=</span> falseconnection_pool_max_idle_time <span class="token operator">=</span> <span class="token number">3600</span>load_fdfs_parameters_from_tracker<span class="token operator">=</span>falseuse_storage_id <span class="token operator">=</span> falsestorage_ids_filename <span class="token operator">=</span> storage_ids<span class="token punctuation">.</span>confhttp<span class="token punctuation">.</span>tracker_server_port<span class="token operator">=</span><span class="token number">80</span><span class="token comment" spellcheck="true"># 测试fastdfs客户端</span><span class="token comment" spellcheck="true"># /utils/fdfs/test.py</span><span class="token keyword">from</span> fdfs_client<span class="token punctuation">.</span>client <span class="token keyword">import</span> get_tracker_conf<span class="token punctuation">,</span> Fdfs_client<span class="token keyword">from</span> syl<span class="token punctuation">.</span>settings <span class="token keyword">import</span> FDFS_CONF_PATH<span class="token comment" spellcheck="true"># 1. 获取配置文件</span>conf <span class="token operator">=</span> get_tracker_conf<span class="token punctuation">(</span>conf_path<span class="token operator">=</span>FDFS_CONF_PATH<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 创建FastDFS客户端实例</span>client <span class="token operator">=</span> Fdfs_client<span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 调用FastDFS客户端上传文件方法,</span>ret <span class="token operator">=</span> client<span class="token punctuation">.</span>upload_by_filename<span class="token punctuation">(</span><span class="token string">'/Users/mac/Pictures/0.jpg'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 自定义存储后端</span><span class="token comment" spellcheck="true"># utils/fdfs/my_storage.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>files<span class="token punctuation">.</span>storage <span class="token keyword">import</span> Storage<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> fdfs_client<span class="token punctuation">.</span>client <span class="token keyword">import</span> Fdfs_client<span class="token punctuation">,</span> get_tracker_conf<span class="token keyword">class</span> <span class="token class-name">MyStorage</span><span class="token punctuation">(</span>Storage<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>base_url <span class="token operator">=</span> settings<span class="token punctuation">.</span>FDFS_BASE_URL    <span class="token keyword">def</span> <span class="token function">_open</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">_save</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 返回 真实存储的 文件名</span>        <span class="token comment" spellcheck="true"># 1. 读取配置文件</span>        conf <span class="token operator">=</span> get_tracker_conf<span class="token punctuation">(</span>conf_path<span class="token operator">=</span>settings<span class="token punctuation">.</span>FDFS_CONF_PATH<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 2. 创建FastDFS客户端实例</span>        client <span class="token operator">=</span> Fdfs_client<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3. 调用FastDFS客户端上传文件方法</span>        ret <span class="token operator">=</span> client<span class="token punctuation">.</span>upload_by_buffer<span class="token punctuation">(</span>content<span class="token punctuation">.</span>file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret<span class="token punctuation">[</span><span class="token string">'Remote file_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>base_url <span class="token operator">+</span> name    <span class="token keyword">def</span> <span class="token function">exists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 配置 fastdfs</span><span class="token comment" spellcheck="true"># fasfdfs 服务器地址</span>FDFS_BASE_URL <span class="token operator">=</span> <span class="token string">'http://10.211.55.15:8888/'</span>FDFS_CONF_PATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'utils/fdfs/client.conf'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改系统默认的文件管理类</span>DEFAULT_FILE_STORAGE <span class="token operator">=</span> <span class="token string">'utils.fdfs.my_storage.MyStorage'</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器缓存一个函数的结果</title>
      <link href="2020/09/14/zhuang-shi-qi-shi-xian-yi-ge-huan-cun/"/>
      <url>2020/09/14/zhuang-shi-qi-shi-xian-yi-ge-huan-cun/</url>
      
        <content type="html"><![CDATA[<h3 id="实现一个简单的装饰器-用来对某个函数的结果进行缓存"><a href="#实现一个简单的装饰器-用来对某个函数的结果进行缓存" class="headerlink" title="实现一个简单的装饰器,用来对某个函数的结果进行缓存"></a>实现一个简单的装饰器,用来对某个函数的结果进行缓存</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> picklecache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">is_obsolete</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 判断缓存是否过期，返回True则过期</span>    d <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> entry<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> d <span class="token operator">></span> duration<span class="token keyword">def</span> <span class="token function">compute_key</span><span class="token punctuation">(</span>function<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将传入的参数序列化</span>    key <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">memoize</span><span class="token punctuation">(</span>duration<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 装饰器中缓存时间默认为10秒</span>    <span class="token keyword">def</span> <span class="token function">_memorize</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第二层传函数</span>        <span class="token keyword">def</span> <span class="token function">__memorize</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第三层传入非固定参数</span>            key <span class="token operator">=</span> compute_key<span class="token punctuation">(</span>function<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span>            <span class="token keyword">if</span> key <span class="token keyword">in</span> cache <span class="token operator">and</span> <span class="token operator">not</span> is_obsolete<span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'we got a winner'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'  '</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 如果缓存中有，就直接返回缓存过的结果</span>            result <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'value'</span><span class="token punctuation">:</span> result<span class="token punctuation">,</span> <span class="token string">'time'</span><span class="token punctuation">:</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span>            <span class="token keyword">return</span> result        <span class="token keyword">return</span> __memorize    <span class="token keyword">return</span> _memorize@memoize<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">complex</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    a<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入a: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入b: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>complex<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ能为你做些什么？</title>
      <link href="2020/09/13/rabbitmq-neng-zuo-shi-me/"/>
      <url>2020/09/13/rabbitmq-neng-zuo-shi-me/</url>
      
        <content type="html"><![CDATA[<h2 id="RabbitMQ能为你做些什么？"><a href="#RabbitMQ能为你做些什么？" class="headerlink" title="RabbitMQ能为你做些什么？"></a>RabbitMQ能为你做些什么？</h2><p><strong>消息队列中间件是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。目前使用较多的消息队列有ActiveMQ，RabbitMQ，ZeroMQ，Kafka，MetaMQ，RocketMQ。</strong></p><p><strong>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。</strong></p><p><strong>rabbitMQ是一款基于AMQP协议的消息中间件，它能够在应用之间提供可靠的消息传输。在易用性，扩展性，高可用性上表现优秀。使用消息中间件利于应用之间的解耦，生产者（客户端）无需知道消费者（服务端）的存在。而且两端可以使用不同的语言编写，大大提供了灵活性。</strong></p><p><strong>消息系统允许软件、应用相互连接和扩展．这些应用可以相互链接起来组成一个更大的应用，或者将用户设备和数据进行连接．消息系统通过将消息的发送和接收分离来实现应用程序的异步和解偶．</strong></p><p>或许你正在考虑进行数据投递，非阻塞操作或推送通知。或许你想要实现发布／订阅，异步处理，或者工作队列。所有这些都可以通过消息系统实现。</p><p>RabbitMQ是一个消息代理 - 一个消息系统的媒介。它可以为你的应用提供一个通用的消息发送和接收平台，并且保证消息在传输过程中的安全。</p><h2 id="技术亮点"><a href="#技术亮点" class="headerlink" title="技术亮点"></a>技术亮点</h2><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>RabbitMQ提供了多种技术可以让你在性能和可靠性之间进行权衡。这些技术包括持久性机制、投递确认、发布者证实和高可用性机制。</p><h3 id="灵活的路由"><a href="#灵活的路由" class="headerlink" title="灵活的路由"></a>灵活的路由</h3><p>消息在到达队列前是通过交换机进行路由的。RabbitMQ为典型的路由逻辑提供了多种内置交换机类型。如果你有更复杂的路由需求，可以将这些交换机组合起来使用，你甚至可以实现自己的交换机类型，并且当做RabbitMQ的插件来使用。</p><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>在相同局域网中的多个RabbitMQ服务器可以聚合在一起，作为一个独立的逻辑代理来使用。</p><h3 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h3><p>对于服务器来说，它比集群需要更多的松散和非可靠链接。为此RabbitMQ提供了联合模型。</p><h3 id="高可用的队列"><a href="#高可用的队列" class="headerlink" title="高可用的队列"></a>高可用的队列</h3><p>在同一个集群里，队列可以被镜像到多个机器中，以确保当其中某些硬件出现故障后，你的消息仍然安全。</p><h3 id="多协议"><a href="#多协议" class="headerlink" title="多协议"></a>多协议</h3><p>RabbitMQ 支持多种消息协议的消息传递。</p><h3 id="广泛的客户端"><a href="#广泛的客户端" class="headerlink" title="广泛的客户端"></a>广泛的客户端</h3><p>只要是你能想到的编程语言几乎都有与其相适配的RabbitMQ客户端。</p><h3 id="可视化管理工具"><a href="#可视化管理工具" class="headerlink" title="可视化管理工具"></a>可视化管理工具</h3><p>RabbitMQ附带了一个易于使用的可视化管理工具，它可以帮助你监控消息代理的每一个环节。</p><h3 id="追踪"><a href="#追踪" class="headerlink" title="追踪"></a>追踪</h3><p>如果你的消息系统有异常行为，RabbitMQ还提供了追踪的支持，让你能够发现问题所在。</p><h3 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h3><p>RabbitMQ附带了各种各样的插件来对自己进行扩展。你甚至也可以写自己的插件来使用。</p><h2 id="还有什么呢…"><a href="#还有什么呢…" class="headerlink" title="还有什么呢…"></a>还有什么呢…</h2><h3 id="商业支持"><a href="#商业支持" class="headerlink" title="商业支持"></a>商业支持</h3><p>可以提供商业支持，包括培训和咨询。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis集群</title>
      <link href="2020/09/12/redis-ji-qun/"/>
      <url>2020/09/12/redis-ji-qun/</url>
      
        <content type="html"><![CDATA[<h4 id="redis集群"><a href="#redis集群" class="headerlink" title="redis集群:"></a>redis集群:</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建集群, 启动6个redis实例, 集群至少要3个节点, 每个节点必须是主从结构</span><span class="token comment" spellcheck="true"># 配置如下:  复制6份, 修改端口号</span>port <span class="token number">7000</span>  <span class="token comment" spellcheck="true"># 端口</span>bind <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span>   <span class="token comment" spellcheck="true"># 这里换成自己的ip</span>daemonize yes  <span class="token comment" spellcheck="true"># 后台运行, 不占用终端</span>pidfile <span class="token number">7000.</span>pid  <span class="token comment" spellcheck="true"># pid保存文件名</span>cluster<span class="token operator">-</span>enabled yes  <span class="token comment" spellcheck="true"># 集群模式</span>cluster<span class="token operator">-</span>config<span class="token operator">-</span>file 7000_node<span class="token punctuation">.</span>conf  <span class="token comment" spellcheck="true"># 集群配置保存文件名</span>cluster<span class="token operator">-</span>node<span class="token operator">-</span>timeout <span class="token number">15000</span>  <span class="token comment" spellcheck="true"># 节点超时时间(毫秒)</span>appendonly yes  <span class="token comment" spellcheck="true"># 所有的写操作都追加到日志中</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 启动6个redis节点</span>redis<span class="token operator">-</span>server <span class="token number">7000.</span>confredis<span class="token operator">-</span>server <span class="token number">7001.</span>confredis<span class="token operator">-</span>server <span class="token number">7002.</span>confredis<span class="token operator">-</span>server <span class="token number">7003.</span>confredis<span class="token operator">-</span>server <span class="token number">7004.</span>confredis<span class="token operator">-</span>server <span class="token number">7005.</span>conf</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 复制 集群管理工具 到系统路径, 方便调用工具</span>sudo cp <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>doc<span class="token operator">/</span>redis<span class="token operator">-</span>tools<span class="token operator">/</span>examples<span class="token operator">/</span>redis<span class="token operator">-</span>trib<span class="token punctuation">.</span>rb <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span><span class="token comment" spellcheck="true"># 使用集群配置工具, 把6个节点配置成集群模式,  --replicas 1 表示每个主节点有一个从节点</span>redis<span class="token operator">-</span>trib<span class="token punctuation">.</span>rb create <span class="token operator">-</span><span class="token operator">-</span>replicas <span class="token number">1</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7000</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7001</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7002</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7003</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7004</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7005</span><span class="token comment" spellcheck="true"># 使用命令行工具测试集群</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>c <span class="token operator">-</span>h <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span>p <span class="token number">7000</span>   <span class="token comment" spellcheck="true"># -c 表示集群模式</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 安装依赖包</span>django<span class="token operator">-</span>cluster<span class="token operator">-</span>redis<span class="token operator">==</span> <span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">5</span>django<span class="token operator">-</span>redis<span class="token operator">==</span> <span class="token number">4.10</span><span class="token punctuation">.</span><span class="token number">0</span>redis<span class="token operator">==</span> <span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 注意这个版本</span>redis<span class="token operator">-</span>py<span class="token operator">-</span>cluster<span class="token operator">==</span> <span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">0</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 配置cache</span>CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django_redis.cache.RedisCache'</span><span class="token punctuation">,</span>        <span class="token string">'LOCATION'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"redis://10.211.55.15:7000"</span><span class="token punctuation">,</span>            <span class="token string">"redis://10.211.55.15:7001"</span><span class="token punctuation">,</span>            <span class="token string">"redis://10.211.55.15:7002"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'REDIS_CLIENT_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rediscluster.RedisCluster'</span><span class="token punctuation">,</span>            <span class="token string">'CONNECTION_POOL_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rediscluster.connection.ClusterConnectionPool'</span><span class="token punctuation">,</span>            <span class="token string">"CONNECTION_POOL_KWARGS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"decode_responses"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 测试django-redis 集群模式, 集群模式不支持切换库编号</span><span class="token keyword">from</span> django_redis <span class="token keyword">import</span> get_redis_connectionredis_client <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token punctuation">)</span>redis_client<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'祖安人'</span><span class="token punctuation">)</span>redis_client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相思啊！</title>
      <link href="2020/09/12/xiang-si/"/>
      <url>2020/09/12/xiang-si/</url>
      
        <content type="html"><![CDATA[<h3 id="相思"><a href="#相思" class="headerlink" title="相思"></a>相思</h3><p><a href="https://hanyu.baidu.com/s?wd=%E7%8E%8B%E7%BB%B4">                        【作者】王维 </a>【朝代】唐</p><p>红豆生南国，春来发几枝。</p><p>愿君多采撷，此物最相思。</p><p>标签:   <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E6%83%85%E6%84%9F">情感</a>    <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E5%92%8F%E7%89%A9">咏物</a>     <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E5%94%90%E8%AF%97%E4%B8%89%E7%99%BE%E9%A6%96">唐诗三百首</a>    <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E6%80%9D%E5%BF%B5">思念</a>    <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E6%8A%92%E6%83%85">抒情</a></p><p><a href="javascript:"><strong>译文</strong></a> <a href="javascript:"><strong>注释</strong></a></p><p>鲜红浑圆的红豆，生长在阳光明媚的南方，春暖花开的季节，不知又生出多少？希望思念的人儿多多采集，小小红豆引人相思。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 诗词歌赋 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/12/hello-world/"/>
      <url>2020/09/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
