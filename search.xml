<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>技术点</title>
      <link href="2020/10/11/5-xiang-mu-ji-zhu-dian-pou-xi/"/>
      <url>2020/10/11/5-xiang-mu-ji-zhu-dian-pou-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-项目技术点剖析"><a href="#1-1-项目技术点剖析" class="headerlink" title="1.1 项目技术点剖析"></a>1.1 项目技术点剖析</h1><h3 id="1-（金禹含）使用Redis实现分布式部署单点登录（单点登录第一种方法：redis分布式存储解决方案）"><a href="#1-（金禹含）使用Redis实现分布式部署单点登录（单点登录第一种方法：redis分布式存储解决方案）" class="headerlink" title="1.（金禹含）使用Redis实现分布式部署单点登录（单点登录第一种方法：redis分布式存储解决方案）"></a>1.（金禹含）使用Redis实现分布式部署单点登录（单点登录第一种方法：redis分布式存储解决方案）</h3><p>因为这个项目是一个分布式部署的项目，而且我们采用的是nginx负载均衡的策略，导致了每一个服务器都需要开辟一个空间来进行用户信息的维护，消耗了大量的资源，所以，我当时使用到了Redis来作为维护用户信息的空间，将用户登录的信息存入Redis中，并且在存入时设置key的过期时间，所有的服务器共用一个Redis，每次进行操作时只需要去Redis中去判断这个用户是否存在，存在的话就说明这个用户现在是登录状态，不存在就说明这个用户没有登录，或者登录已经失效，让用户进行重新登录。</p><ul><li>为什么会存在单点登录的问题<ul><li><strong>session默认是存储在当前服务器的内存中</strong>，如果是集群，那么只有登录那台机器的内存中才有这个session</li><li>比如说我在A机器登录，B机器是没有这个session存在的，所以需要重新验证</li></ul></li><li>如何解决这个单点登录问题<ul><li>不管在那一台web服务器登录，都会把token值存放到我们的一个集中管理的redis服务器中</li><li>但客户端携带token验证的时候，会先从redis中获取，就实现单点登录</li></ul></li><li>现实举例<ul><li>比如你写的一个tornado项目，分别部署到A，B两台机器上</li><li>如果直接使用session，那么如果在A机器登录，token只会在A服务器的内存</li><li>因为请求会封不到A，b连个机器，如果这个请求到了B机器，B的内存中没有就会让重新登录</li><li>所以登录A机器的时候我们应该把token值写入到redis中，A/B机器登录，都从redis中获取token进行校验</li></ul></li></ul><h3 id="2-（刘香鹏）基于JWT技术及RSA非对称加密实现真正无状态的单点登录（单点等第二种方法：JWT）"><a href="#2-（刘香鹏）基于JWT技术及RSA非对称加密实现真正无状态的单点登录（单点等第二种方法：JWT）" class="headerlink" title="2.（刘香鹏）基于JWT技术及RSA非对称加密实现真正无状态的单点登录（单点等第二种方法：JWT）"></a>2.（刘香鹏）基于JWT技术及RSA非对称加密实现真正无状态的单点登录（单点等第二种方法：JWT）</h3><h3 id="3-（刘宏伟）用户登录对接QQ、微信、微博等三方登录"><a href="#3-（刘宏伟）用户登录对接QQ、微信、微博等三方登录" class="headerlink" title="3.（刘宏伟）用户登录对接QQ、微信、微博等三方登录"></a>3.（刘宏伟）用户登录对接QQ、微信、微博等三方登录</h3><p><a href="https://open.weixin.qq.com/connect/qrconnect">https://open.weixin.qq.com/connect/qrconnect</a>?</p><p><strong>appid</strong>=wx827225356b689e24&amp;（到官方注册的应用标识，标识开发者）</p><p><strong>redirect_uri</strong>=<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></p><p>参考博客：<a href="https://www.cnblogs.com/xiaonq/p/12271345.html">https://www.cnblogs.com/xiaonq/p/12271345.html</a></p><p><img src="assets/1582081967543.png" alt="1582081967543"></p><h3 id="4-（苗雨露）基于-Django-的后台管理平台，采用-RBAC-权限管理机制"><a href="#4-（苗雨露）基于-Django-的后台管理平台，采用-RBAC-权限管理机制" class="headerlink" title="4.（苗雨露）基于 Django 的后台管理平台，采用 RBAC 权限管理机制"></a>4.（苗雨露）基于 Django 的后台管理平台，采用 RBAC 权限管理机制</h3><ul><li>用户表、角色表、权限表<ul><li>用户表：账号、姓名、邮箱、添加时间、最后登录时间、账号是否禁止登录</li><li>角色表：商品管理员、订单管理员、超级管理员</li><li>资源列表：资源名称（项目模块名称），资源路径（后台路由）<ul><li>资源分类：商品模块、订单模块、营销模块、权限模块、内容模块、其他模块</li></ul></li></ul></li></ul><h3 id="1-RBAC角色权限管理机制实现思路"><a href="#1-RBAC角色权限管理机制实现思路" class="headerlink" title="1. RBAC角色权限管理机制实现思路"></a>1. RBAC角色权限管理机制实现思路</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 面向资源编程</span>https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>shiyanlou<span class="token punctuation">.</span>com<span class="token operator">/</span>v1<span class="token operator">/</span>books<span class="token operator">/</span>        <span class="token comment" spellcheck="true"># 请求后端 books书籍表中数据</span>    get    post<span class="token comment" spellcheck="true"># 用户表</span><span class="token comment" spellcheck="true"># 角色表</span><span class="token comment" spellcheck="true"># 权限表</span>get<span class="token operator">/</span>post<span class="token operator">/</span>put<span class="token operator">/</span>delete 对应关系</code></pre><ul><li>所有权限的本质是对数据库中表中数据增删改查的操作</li><li>而这些增删改查的操作是通过前端不同路由，通过get、post、put、delete方法操作数据库的</li><li>对权限的控制，最简单的方法就是判断当前用户是否可以对指定路由请求操作的权限</li><li>把角色和这个角色能够访问的 url 和 请求方式进行关联（因为正是的业务逻辑用户权限划分力度可能非常细致）</li><li>再简单的业务逻辑中这一张表就是权限表</li></ul><table><thead><tr><th>路由 资源(可能对应的是后端路由的 name名称，可以通过name名称解析出对应路由)</th><th>请求方式</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>get</td><td>判断用户是否可以查询books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>post</td><td>判断用户是否可以添加books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>put</td><td>判断用户是否可以更新books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>delete</td><td>判断用户是否可以删除books表中数据</td></tr></tbody></table><ul><li>后端如何判断用户权限<ul><li>用户发送求方法 <a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a> 的url</li><li>后端首先查询时哪一个用户，然后查询当前用户的角色</li><li>最后判断这个角色是否可以访问 <a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a> 的对应方法即可</li><li>如果这个角色有权限访问这个url就返回数据，不能访问就返回 401状态码</li></ul></li></ul><h3 id="5-（秦梦奇）结合DRF框架提供标准RESTful-API接口"><a href="#5-（秦梦奇）结合DRF框架提供标准RESTful-API接口" class="headerlink" title="5.（秦梦奇）结合DRF框架提供标准RESTful API接口"></a>5.（秦梦奇）结合DRF框架提供标准RESTful API接口</h3><p><a href="https://www.cnblogs.com/xiaonq/p/10053234.html">https://www.cnblogs.com/xiaonq/p/10053234.html</a></p><p><span style="color: red"> RESTful不是一种技术，而是一种接口规范，主要规范包括：1.请求方式、2.状态码、3、url规范、4、传参规范</span></p><ul><li><p>请求方式method</p><ul><li>GET      ：从服务器取出资源（一项或多项）</li><li>POST    ：在服务器新建一个资源</li><li>PUT      ：在服务器更新资源（客户端提供改变后的完整资源）</li><li>PATCH  ：在服务器更新资源（客户端提供改变的属性）</li><li>DELETE ：从服务器删除资源</li></ul></li><li><p><strong>状态码</strong></p></li></ul><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''1. 2XX请求成功'''</span><span class="token comment" spellcheck="true"># 200 请求成功，一般用于GET与POST请求</span><span class="token comment" spellcheck="true"># 201 Created - [POST/PUT/PATCH]：用户新建或修改数据成功。</span><span class="token comment" spellcheck="true"># 202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><span class="token comment" spellcheck="true"># 204 NO CONTENT - [DELETE]：用户删除数据成功。</span><span class="token triple-quoted-string string">'''2. 3XX重定向'''</span><span class="token comment" spellcheck="true"># 301 NO CONTENT - 永久重定向</span><span class="token comment" spellcheck="true"># 302 NO CONTENT - 临时重定向</span><span class="token triple-quoted-string string">'''3. 4XX客户端错误'''</span><span class="token comment" spellcheck="true"># 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误。</span><span class="token comment" spellcheck="true"># 401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><span class="token comment" spellcheck="true"># 403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><span class="token comment" spellcheck="true"># 404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录。</span><span class="token comment" spellcheck="true"># 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><span class="token comment" spellcheck="true"># 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><span class="token comment" spellcheck="true"># 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</span><span class="token triple-quoted-string string">'''4. 5XX服务端错误'''</span><span class="token comment" spellcheck="true"># 500 INTERNAL SERVER ERROR - [*]：服务器内部错误，无法完成请求</span><span class="token comment" spellcheck="true"># 501 Not Implemented     服务器不支持请求的功能，无法完成请求</span></code></pre><ul><li><p>面向资源编程： 路径，视网络上任何东西都是资源，均使用名词表示（可复数）</p><ul><li>所有请求实际操作的都是数据库中的表，每一个表当做一个资源</li><li>资源是一个名称，所以RESTful规范中URL只能有名称或名词的复数形式</li><li><a href="https://api.example.com/v1/zoos">https://api.example.com/v1/zoos</a></li><li><a href="https://api.example.com/v1/animals">https://api.example.com/v1/animals</a></li><li><a href="https://api.example.com/v1/employees">https://api.example.com/v1/employees</a></li></ul></li><li><p>过滤，通过在url上传参的形式传递搜索条件</p><ul><li><a href="https://api.example.com/v1/zoos?limit=10%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E7%9A%84%E6%95%B0%E9%87%8F">https://api.example.com/v1/zoos?limit=10：指定返回记录的数量</a></li><li><a href="https://api.example.com/v1/zoos?offset=10%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E7%9A%84%E5%BC%80%E5%A7%8B%E4%BD%8D%E7%BD%AE">https://api.example.com/v1/zoos?offset=10：指定返回记录的开始位置</a></li><li><a href="https://api.example.com/v1/zoos?page=2&amp;per_page=100%EF%BC%9A%E6%8C%87%E5%AE%9A%E7%AC%AC%E5%87%A0%E9%A1%B5%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%AF%8F%E9%A1%B5%E7%9A%84%E8%AE%B0%E5%BD%95%E6%95%B0">https://api.example.com/v1/zoos?page=2&amp;per_page=100：指定第几页，以及每页的记录数</a></li><li><a href="https://api.example.com/v1/zoos?sortby=name&amp;order=asc%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E6%8C%89%E7%85%A7%E5%93%AA%E4%B8%AA%E5%B1%9E%E6%80%A7%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%8E%92%E5%BA%8F%E9%A1%BA%E5%BA%8F">https://api.example.com/v1/zoos?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序</a></li><li><a href="https://api.example.com/v1/zoos?animal_type_id=1%EF%BC%9A%E6%8C%87%E5%AE%9A%E7%AD%9B%E9%80%89%E6%9D%A1%E4%BB%B6">https://api.example.com/v1/zoos?animal_type_id=1：指定筛选条件</a></li></ul></li></ul><blockquote><h4 id="django的DRF"><a href="#django的DRF" class="headerlink" title="django的DRF"></a>django的DRF</h4></blockquote><p><a href="https://www.cnblogs.com/xiaonq/p/10987889.html">https://www.cnblogs.com/xiaonq/p/10987889.html</a></p><ul><li>认证</li><li>权限</li><li>序列化</li><li>版本号</li><li>限流</li></ul><p><strong>要求：对照上面的博客把，认证，权限，序列化</strong></p><h3 id="6-（张汇森）借助xterm-js、paramiko、Dwebsocket、SSH完成WebSSH在线编程"><a href="#6-（张汇森）借助xterm-js、paramiko、Dwebsocket、SSH完成WebSSH在线编程" class="headerlink" title="6.（张汇森）借助xterm.js、paramiko、Dwebsocket、SSH完成WebSSH在线编程"></a>6.（张汇森）借助xterm.js、paramiko、Dwebsocket、SSH完成WebSSH在线编程</h3><p>websocket：<a href="https://www.cnblogs.com/xiaonq/p/12238651.html">https://www.cnblogs.com/xiaonq/p/12238651.html</a></p><p>webssh：<a href="https://www.cnblogs.com/xiaonq/p/12243024.html">https://www.cnblogs.com/xiaonq/p/12243024.html</a></p><blockquote><h4 id="1-什么是WebSSH"><a href="#1-什么是WebSSH" class="headerlink" title="1.什么是WebSSH?"></a>1.<strong>什么是WebSSH?</strong></h4></blockquote><ul><li>webssh 泛指一种技术可以在网页上实现一个 SSH 终端。</li><li>ssh终端：用来通过ssh协议，连接服务器进行管理</li><li>运维开发方向：堡垒机登录、线上机器管理（因为运维人员不肯能24小时携带电脑）</li><li>在线编程：提供一个编程环境</li></ul><blockquote><h4 id="2-websocket-3w1h"><a href="#2-websocket-3w1h" class="headerlink" title="2.websocket(3w1h)"></a>2.websocket(3w1h)</h4></blockquote><ul><li><strong>什么是websocket</strong><ul><li>webSocket是一种在单个TCP连接上进行全双工通信的协议</li><li>客户端和服务器之间的数据交换变得更加简单，<strong>允许服务端主动向客户端推送数据</strong>。</li><li>浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输</li></ul></li><li><strong>websocket与http区别</strong><ul><li>http请求建立连接只能发送一次请求,不能有服务器端主动向客户端发送请求</li><li>websocket建立的长连接，一次连接，后续一直通信，这样节省资源，可以有客户端发送请求给服务器端</li></ul></li><li><strong>远古时期解决方案就是轮询</strong><ul><li>客户端以设定的时间间隔周期性地向服务端发送请求，频繁地查询是否有新的数据改动（浪费流量和资源）</li></ul></li><li><strong>webSocket应用场景？</strong><ul><li><strong>聊天软件：</strong>最著名的就是微信，QQ，这一类社交聊天的app</li><li><strong>弹幕：</strong>各种直播的弹幕窗口</li><li><strong>在线教育：</strong>可以视频聊天、即时聊天以及其与别人合作一起在网上讨论问题…</li></ul></li><li><strong>websocket原理</strong><ul><li>websocket首先借助http协议（通过在http头部设置属性，请求和服务器进行协议升级，升级协议为websocket的应用层协议）</li><li>建立好和服务器之间的数据流，数据流之间底层还是依靠TCP协议；</li><li>websocket会接着使用这条建立好的数据流和服务器之间保持通信；</li><li>由于复杂的网络环境，数据流可能会断开，在实际使用过程中，我们在onFailure或者onClosing回调方法中，实现重连</li></ul></li><li>websocket<strong>实现心跳检测的思路</strong><ul><li>通过setInterval定时任务每个3秒钟调用一次reconnect函数</li><li>reconnect会通过socket.readyState来判断这个websocket连接是否正常</li><li>如果不正常就会触发定时连接，每4s钟重试一次，直到连接成功</li><li>如果是网络断开的情况下，在指定的时间内服务器端并没有返回心跳响应消息，因此服务器端断开了。</li><li>服务断开我们使用ws.close关闭连接，在一段时间后，可以通过 onclose事件监听到。</li></ul></li><li>实现聊天功能</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 后端的django代码</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> dwebsocket<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> accept_websocket<span class="token punctuation">,</span>require_websocket<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">from</span> dwebsocket<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>default<span class="token punctuation">.</span>websocket <span class="token keyword">import</span> DefaultWebSocket  <span class="token comment" spellcheck="true"># request.websocket就是DefaultWebSocket对象</span>tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 只有加了这个装饰器，这个视图函数才能处理websocket请求</span>@accept_websocket<span class="token keyword">def</span> <span class="token function">echo</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#判断是不是websocket连接</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#如果是普通的http方法</span>            message <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''1.实现消息推送'''</span>        tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>request<span class="token punctuation">.</span>websocket<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把所有连接的websocket连接都加入列表中</span>        <span class="token comment" spellcheck="true">#  request.websocket = &lt;dwebsocket.backends.default.websocket.DefaultWebSocket object at 0x00000272E69A4320></span>        <span class="token comment" spellcheck="true"># failed:Invalid frame header：你的视图没有阻塞，请求过一次后服务器端就关闭连接了</span>        <span class="token comment" spellcheck="true"># 所以使用for循环 request.websocket 对象就会调用 __iter__()方法，利用迭代器进行阻塞</span>        <span class="token keyword">for</span> message <span class="token keyword">in</span> request<span class="token punctuation">.</span>websocket<span class="token punctuation">:</span>            <span class="token keyword">for</span> ws <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>                ws<span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span class="token triple-quoted-string string">'''2.实现聊天室思路'''</span>        <span class="token comment" spellcheck="true"># d = {}                                # 使用了一个dict来保存数据，</span>        <span class="token comment" spellcheck="true"># d['zhangsan'] = request.websocket     # key值是用户身份，value值是dict类型的{username:websocket}。</span>        <span class="token comment" spellcheck="true"># d['zhangsan'].send(message)           # 发送消息到客户端</span>        <span class="token comment" spellcheck="true"># d['lisi'].send(message)   ==>  request.websocket.send(message)</span>        <span class="token comment" spellcheck="true"># 这只是个思路，如果正式使用的话，肯定会对group封装，也不会只保存在内存中，需要保存到redis中去</span>        <span class="token comment" spellcheck="true"># 并且对每个websocket对象设置有效期，过期清除，避免长期挂起状态消耗系统资源等</span></code></pre><pre class=" language-html"><code class="language-html"># 前端VUE代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span><span class="token string">"ws://127.0.0.1:8000/echo?username=zhangsan&amp;token=xxxx"</span><span class="token punctuation">,</span>        socket<span class="token punctuation">:</span><span class="token string">""</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 初始化</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>WebSocket<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您的浏览器不支持socket"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 实例化socket</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 监听socket连接</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>open          <span class="token comment" spellcheck="true">// 监听socket错误信息</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>error          <span class="token comment" spellcheck="true">// 监听socket消息</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getMessage        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      open<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"socket连接成功"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接错误"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      getMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 打印后台返回的数据</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      send<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token string">'hahahahhahaha'</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 发送给后台的数据</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      close<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"socket已经关闭"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    destroyed <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 销毁监听</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>close    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="7-（马文龙）redis集群实现秒杀和解决超卖问题"><a href="#7-（马文龙）redis集群实现秒杀和解决超卖问题" class="headerlink" title="7.（马文龙）redis集群实现秒杀和解决超卖问题"></a>7.（马文龙）redis集群实现秒杀和解决超卖问题</h3><ul><li><p><strong>redis命令：</strong><a href="https://www.cnblogs.com/xiaonq/p/7919111.html">https://www.cnblogs.com/xiaonq/p/7919111.html</a></p></li><li><p><strong>redis解决超卖问题：</strong><a href="https://www.cnblogs.com/xiaonq/p/12328934.html">https://www.cnblogs.com/xiaonq/p/12328934.html</a></p></li></ul><h3 id="8-（杨茂森）集成支付宝、微信、银联等进行聚合支付-怎么保证接口安全"><a href="#8-（杨茂森）集成支付宝、微信、银联等进行聚合支付-怎么保证接口安全" class="headerlink" title="8.（杨茂森）集成支付宝、微信、银联等进行聚合支付(怎么保证接口安全)"></a>8.（杨茂森）集成支付宝、微信、银联等进行聚合支付(怎么保证接口安全)</h3><p>支付宝支付：<a href="https://www.cnblogs.com/xiaonq/p/12332990.html">https://www.cnblogs.com/xiaonq/p/12332990.html</a></p><ul><li><p>相关的资源：appid、支付宝公钥、app公钥、app私钥、django环境</p></li><li><p>流程</p><ul><li>生成公钥（app公钥、app私钥）</li><li>APP的公钥要上传到沙箱环境，然后我们要下载支付宝公钥</li></ul></li><li><p>代码如何实现</p><ul><li>第一：生成支付的url<ul><li>在电脑本地生成公钥、私钥（app公钥、app私钥）</li><li>APP的公钥要上传到沙箱环境，然后我们要下载支付宝公钥</li><li>提供（实例化Alipay对象）：appid、支付宝公钥、app私钥</li><li>提供（拼接付款的url）：订单id、金额、标题、return_url(付款成功的回调接口)、notify_url(付款成功后的异步通知)</li></ul></li><li>第二：主动查询支付结果<ul><li>提供（实例化Alipay对象）：appid、支付宝公钥、app私钥</li><li>提供一个 订单id就可以查询当前订单支付结果</li></ul></li></ul></li><li><p>支付宝是如何保证数据安全的（数据传输如何保证安全）</p></li></ul><h3 id="9-（雷超凡）课程加入路径celery触发更新提醒"><a href="#9-（雷超凡）课程加入路径celery触发更新提醒" class="headerlink" title="9.（雷超凡）课程加入路径celery触发更新提醒"></a>9.（雷超凡）课程加入路径celery触发更新提醒</h3><ul><li><p>celery原理</p></li><li><p>celery应用场景</p><ul><li>异步任务<ul><li>发邮件、发送消息</li><li>自动化工单中耗时任务</li><li>所有需要异步处理的请求都可以</li></ul></li><li>定时任务<ul><li>工单系统定时获取超时工单进行延时报警</li><li>对过期会员进行清理</li></ul></li></ul></li><li><p>celery的场景（生产者消费者）可以使用多线程解决吗</p><ul><li>前端发送一个请求，执行自动化工单需要半个小时，这时候如果使用多线程页面会等待吗？</li></ul></li></ul><h3 id="10-进程"><a href="#10-进程" class="headerlink" title="10.进程"></a>10.进程</h3><ul><li><p>进程</p><p><a href="https://www.cnblogs.com/xiaonq/p/7905347.html#i3">https://www.cnblogs.com/xiaonq/p/7905347.html#i3</a></p><ul><li><strong>进程是资源分配的最小单位（ 内存、cpu、网络、io）</strong></li><li><strong>一个运行起来的程序就是一个进程</strong><ul><li>什么是程序（程序是我们存储在硬盘里的代码）</li><li>硬盘（256G）、内存条（8G）</li><li>当我们双击图标，打开程序的时候，实际上就是通过I/O操作（读写）内存条里面</li><li>内存条就是我们所指的资源</li><li>CPU分时<ul><li>CPU比你的手速快多了，分时处理每个线程，但是由于太快然你觉得每个线程都是独占cpu</li><li>cpu是计算，只有时间片到了，获取cpu，线程真正执行</li><li>当你想使用 网络、磁盘等资源的时候，需要cpu的调度</li></ul></li></ul></li><li><strong>进程具有独立的内存空间，所以没有办法相互通信</strong><ul><li>进程如何通信<ul><li>进程queue</li><li>pipe</li><li>managers</li><li>RabbitMQ、redis等</li></ul></li></ul></li><li>为什么需要进程池<ul><li>一次性开启指定数量的进程</li><li>如果有十个进程，有一百个任务，一次可以处理多少个（一次性只能处理十个）</li><li>防止进程开启数量过多导致服务器压力过大</li></ul></li></ul></li></ul><h3 id="11-线程"><a href="#11-线程" class="headerlink" title="11.线程"></a>11.线程</h3><ul><li>有了进程为什么还需要线程<ul><li>因为进程不能同一时间只能做一个事情</li></ul></li><li>什么是线程<ul><li>线程是操作系统调度的最小单位</li><li>线程是进程正真的执行者，是一些指令的集合（进程资源的拥有者）</li><li>同一个进程下的读多个线程共享内存空间，数据直接访问（数据共享）</li><li>为了保证数据安全，必须使用线程锁</li></ul></li><li>GIL全局解释器锁<ul><li>在python全局解释器下，保证同一时间只有一个线程运行</li><li>防止多个线程都修改数据</li></ul></li><li>线程锁（互斥锁）<ul><li>GIL锁只能保证同一时间只能有一个线程对某个资源操作，但当上一个线程还未执行完毕时可能就会释放GIL，其他线程就可以操作了</li><li>线程锁本质把线程中的数据加了一把互斥锁<ul><li>mysql中共享锁 &amp; 互斥锁<ul><li>mysql共享锁：共享锁，所有线程都能读，而不能写</li><li>mysql排它锁：排它，任何线程读取这个这个数据的权利都没有</li></ul></li><li>加上线程锁之后所有其他线程，读都不能读这个数据</li></ul></li><li>有了GIL全局解释器锁为什么还需要线程锁<ul><li>因为cpu是分时使用的</li></ul></li></ul></li><li><strong>死锁定义</strong><ul><li>两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去</li></ul></li></ul><h3 id="12-协程"><a href="#12-协程" class="headerlink" title="12.协程"></a>12.协程</h3><ul><li><p>什么是协程</p><ul><li>协程微线程，纤程，本质是一个单线程</li><li>协程能在单线程处理高并发<ul><li>线程遇到I/O操作会等待、阻塞，协程遇到I/O会自动切换（剩下的只有CPU操作）</li><li>线程的状态保存在CPU的寄存器和栈里而协程拥有自己的空间，所以无需上下文切换的开销，所以快、</li></ul></li><li>为甚么协程能够遇到I/O自动切换<ul><li>协程有一个gevent模块(封装了greenlet模块)，遇到I/O自动切换</li></ul></li></ul></li><li><p>协程缺点</p><ul><li>无法利用多核资源：<strong>协程的本质是个单线程,它不能同时将 单个CPU 的多个核用上</strong>,协程需要和进程配合才能运行在多CPU上</li><li><strong>线程阻塞（Blocking）操作（如IO时）会阻塞掉整个程序</strong></li></ul></li><li><p>协程最大的优点</p><ul><li>不仅是处理高并发（单线程下处理高并发）</li><li>特别节省资源（500日活，用php写需要两百多态机器，但是golang只需要二十多太机器）<ul><li>200多台机器一年</li><li>二十多天机器一年</li></ul></li></ul></li></ul><h3 id="13-select、epool、pool"><a href="#13-select、epool、pool" class="headerlink" title="13.select、epool、pool"></a>13.select、epool、pool</h3><p><a href="https://www.cnblogs.com/xiaonq/p/7907871.html">https://www.cnblogs.com/xiaonq/p/7907871.html</a></p><ul><li><p>I/O的实质是什么？</p><ul><li>I/O的实质是将硬盘中的数据，或收到的数据实现从内核态 copy到 用户态的过程</li><li>本文讨论的背景是Linux环境下的network IO。</li><li>比如微信读取本地硬盘的过程<ul><li>微信进程会发送一个读取硬盘的请求—-》操作系统</li><li>只有内核才能够读取硬盘中的数据—》数据返回给微信程序（看上去就好像是微信直接读取）</li></ul></li></ul></li><li><p>用户态 &amp; 内核态</p><ul><li>系统空间分为两个部分，一部分是内核态，一部分是用户态的部分</li><li>内核态：内核态的空间资源只有操作系统能够访问</li><li>用户态：我们写的普通程序使用的空间</li></ul></li><li><p>select</p><ul><li>只能处理1024个连接（每一个请求都可以理解为一个连接）</li><li>不能告诉用户程序，哪一个连接是活跃的</li></ul></li><li><p>pool</p><ul><li>只是取消了最大1024个活跃的限制</li><li>不能告诉用户程序，哪一个连接是活跃的</li></ul></li><li><p>epool</p><ul><li>不仅取消了1024这个最大连接限制</li><li>而且能告诉用户程序哪一个是活跃的</li></ul></li></ul><h3 id="14-（安喻）基于LocalStorage实现离线客户端购物车，减轻服务端压力。"><a href="#14-（安喻）基于LocalStorage实现离线客户端购物车，减轻服务端压力。" class="headerlink" title="14.（安喻）基于LocalStorage实现离线客户端购物车，减轻服务端压力。"></a>14.（安喻）基于LocalStorage实现离线客户端购物车，减轻服务端压力。</h3><ul><li>localStorage存储在浏览器本地<ul><li>localStorage.setItem(‘key’)</li><li>localStorage.getItem(‘key’)</li></ul></li><li>sessionStorage缓存在前页面啦，关闭页面数据就被清除<ul><li>sessionStorage.setItem(‘key2’,456)</li><li>sessionStorage.getItem(‘key2’)</li></ul></li></ul><h3 id="15-（周子贤）基于Redis搭建高可用集群，实现可靠缓存服务即热点数据保存。redis持久化，集群，哨兵，主从，缓存击穿，热点key。"><a href="#15-（周子贤）基于Redis搭建高可用集群，实现可靠缓存服务即热点数据保存。redis持久化，集群，哨兵，主从，缓存击穿，热点key。" class="headerlink" title="15.（周子贤）基于Redis搭建高可用集群，实现可靠缓存服务即热点数据保存。redis持久化，集群，哨兵，主从，缓存击穿，热点key。"></a>15.（周子贤）基于Redis搭建高可用集群，实现可靠缓存服务即热点数据保存。redis持久化，集群，哨兵，主从，缓存击穿，热点key。</h3><ul><li><p>redis有哪几种集群</p><ul><li>主从模式</li><li>哨兵模式</li><li>codis</li></ul></li><li><p>redis主动同步机制</p><ul><li><strong>RDB</strong><ul><li>全量同步：从服务器把有的数据全部丢弃，让主服务把所有数据全部发给他</li></ul></li><li><strong>AOF</strong><ul><li>增量同步：主服务器只发送从服务器缺少的数据</li></ul></li><li><strong>redis主从同步应该采用哪种方式</strong><ul><li>主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。</li><li>当然，如果有需要，slave 在任何时候都可以发起全量同步。</li><li>redis 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。</li></ul></li></ul></li><li><p>redis主从</p><ul><li>写主库、读从库，减轻服务器读压力</li><li>缺点：但是redis主从不能自动切换master，所以master如果挂掉了，整个集群都不可以写入啦</li></ul></li><li><p>哨兵模式如何解决主从问题</p><ul><li>当用Redis做主从方案时，假如master宕机，Redis本身无法自动进行主备切换</li><li>而Redis-sentinel本身也是一个独立运行的进程，它能监控多个master-slave集群，发现master宕机后能进行自动切换。</li></ul></li><li><p><strong>sentinel原理</strong></p><ul><li><p>sentinel负责持续监控主节点的健康，当主节挂掉时，自动选择一个最优的从节点切换成主节点</p></li><li><p>从节点来连接集群时会首先连接sentinel，通过sentinel来查询主节点的地址</p></li><li><p>当主节点发生故障时，sentinel会将最新的主节点地址告诉客户端，可以实现无需重启自动切换redis</p></li><li><p>sentinel缺点</p><ul><li>redis的slave和master数据时完全一样的，但是有个问题，redis数据时存储在内存中</li><li>内存空间有限，所以哨兵模式不能处理大的数据量</li></ul></li></ul></li><li><p>codis</p><ul><li><p><strong>为什么会出现codis</strong></p><ul><li>在大数据高并发场景下，单个redis实例往往会无法应对</li><li>首先redis内存不易过大，内存太大会导致rdb文件过大，导致主从同步时间过长</li><li>其次在CPU利用率中上，单个redis实例只能利用单核，数据量太大，压力就会特别</li></ul></li><li><p><strong>codis部署方案</strong></p><ul><li>单个codis代理支撑的QPS比较有限，通过启动多个codis代理可以显著增加整体QPS</li><li>多codis还能起到容灾功能，挂掉一个codis代理还有很多codis代理可以继续服务</li></ul></li></ul></li></ul><p><img src="https://img2018.cnblogs.com/blog/1080958/201910/1080958-20191012162231810-1634314001.png" alt="img"></p><ul><li><strong>codis分片的原理</strong><ul><li>codis负责将特定key转发到特定redis实例，codis默认将所有key划分为1024个槽位</li><li>首先会对客户端传来的key进行crc32计算hash值，然后将hash后的整数值对1024进行取模，这个余数就是对应的key槽</li><li>每个槽位都会唯一映射到后面的多个redis实例之一，codis会在内存中维护槽位和redis实例的映射关系</li><li>这样有了上面key对应的槽位，那么它应该转发到那个redis实例就很明确了</li><li>槽位数量默认是1024，如果集群中节点较多，建议将这个数值大一些，比如2048,4096</li></ul></li></ul><h3 id="16-（贾新柱）使用Elasticsearch全文检索"><a href="#16-（贾新柱）使用Elasticsearch全文检索" class="headerlink" title="16.（贾新柱）使用Elasticsearch全文检索"></a>16.（贾新柱）使用Elasticsearch全文检索</h3><h3 id="17-（王卫正）使用协同过滤算法实现课程推荐"><a href="#17-（王卫正）使用协同过滤算法实现课程推荐" class="headerlink" title="17.（王卫正）使用协同过滤算法实现课程推荐"></a>17.（王卫正）<strong>使用协同过滤算法实现课程推荐</strong></h3><p><a href="https://www.cnblogs.com/xiaonq/p/12797571.html">https://www.cnblogs.com/xiaonq/p/12797571.html</a></p><ul><li><p>什么是协同过滤算法</p><ul><li>协同过滤推荐算法是诞生最早，并且较为著名的推荐算法，<strong>主要的功能是预测和推荐</strong>。</li><li>算法通过对用户历史行为数据的挖掘发现用户的偏好，<strong>基于不同的偏好对用户进行群组划分并推荐品味相似的商品</strong>。</li><li>协同过滤推荐算法分为两类，分别是<strong>基于用户的协同过滤算法</strong>(user-based collaboratIve filtering)，和<strong>基于物品的协同过滤算法</strong>(item-based collaborative filtering)。</li><li>简单的说就是：人以类聚，物以群分。下面我们将分别说明这两类推荐算法的原理和实现方法。</li></ul></li><li><p>的协同过滤算法</p><ul><li>协同过滤算法是一种基于关联规则的算法，以购物行为为例。</li><li>假设有甲和乙两名用户，有a、b、c三款产品。</li><li>如果甲和乙都购买了a和b这两种产品，我们可以假定甲和乙有近似的购物品味。</li><li>当甲购买了产品c而乙还没有购买c的时候，我们就可以把c也推荐给乙。</li><li>这是一种典型的user-based情况，就是以user的特性做为一种关联。</li><li><strong>举例：</strong>　　　　<ul><li>1）直觉分析：“用户A/B”都喜欢物品A和物品B，从而“用户A/B”的口味最为相近</li><li>2）因此，为“用户A”推荐物品时可参考“用户B”的偏好，从而推荐D</li></ul></li></ul></li></ul><p><span style="color: red"> 推荐算法的难点是建立数据模型和人物画像,要根据具体事物的特点来建立</span></p><pre><code>举例：比如我最近买了一个华为手机，如果你最近总给我推荐什么？华为、小米的手机，这就是不合理的，因为手机使用周期很长，我可能一年都不会再有买手机的可能比如我最近总吃樱桃，那么你可以推送车厘子给我，这种就算比较合理的，因为樱桃智能池两天</code></pre><p><span style="color: red"> 推荐算法代码中如何实现</span></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一步，将数据读取并格式化为字典形式，便于解析,(如果是数据库中数据，直接读取成字典即可)</span><span class="token comment" spellcheck="true"># 第二步：借助"欧几里德"算法计算用户相似度（距离）</span><span class="token comment" spellcheck="true"># 第三步：计算某个用户与其他用户的相似度</span><span class="token comment" spellcheck="true"># 第四步：根据相似度最高的用户喜好商品排序，把相似度最高用户的喜好推荐给当前用户</span></code></pre><h3 id="18-（董继伟）使用Supervisor对后台服务和uwsgi操作，降低日常维护成本"><a href="#18-（董继伟）使用Supervisor对后台服务和uwsgi操作，降低日常维护成本" class="headerlink" title="18.（董继伟）使用Supervisor对后台服务和uwsgi操作，降低日常维护成本"></a>18.（董继伟）<strong>使用Supervisor对后台服务和uwsgi操作，降低日常维护成本</strong></h3><p><a href="https://www.cnblogs.com/xiaonq/p/12359448.html">https://www.cnblogs.com/xiaonq/p/12359448.html</a></p><h3 id="19-线上服务发布过程（灰度发布）"><a href="#19-线上服务发布过程（灰度发布）" class="headerlink" title="19.线上服务发布过程（灰度发布）"></a>19.线上服务发布过程（灰度发布）</h3><ul><li>如果部署项目的集群数量很大，那么常用灰度发布（比如有三十台后端服务server）<ul><li>首先在一台机器上更新我们最新版本的代码，其余29台机器部署的是以前的代码，比较稳定（灰度发布）</li><li>更新的那太机器，要看更新后的服务日志，如果用户访问，在监控中没有发现大量的 4xx/5xx错误</li><li>证明新代码没问题，就会全量发布到身下的29机器中</li></ul></li><li>docker发布<ul><li>docker运行机器服务是非常快速的，你可以把原有的部署在docker中的服务不用停止</li><li>我只直接在机器上运行新的代码的docker，只需要在nginx的upstream里调整配置，指向新docker部署的服务即可</li><li>完成上面步骤用户流量现在访问的就是新代码docker中服务，旧代码docker中就没有用户流量</li><li>自己设定一个观察时间，如果新代码是问的的，可以直接关闭旧代码中的docker服务</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>m总结</title>
      <link href="2020/09/28/mian-shi-bi-ji/"/>
      <url>2020/09/28/mian-shi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a><strong>工厂模式</strong></h2><p>把创建对象的过程抽象化，用户指定自己想要的对象，不需要知道实列过程，换句话说，隐藏实列化过程，用户只需要通过固定的接口来调用这个类里边的具体方法。</p><h2 id="三方登录"><a href="#三方登录" class="headerlink" title="三方登录"></a><strong>三方登录</strong></h2><h2 id="http响应码"><a href="#http响应码" class="headerlink" title="http响应码"></a><strong>http响应码</strong></h2><p>1XX : 通知<br>2XX : 成功<br>3XX    : 重定向<br>4XX : 客户端错误<br>5XX : 服务端错误</p><h2 id="pyqt5"><a href="#pyqt5" class="headerlink" title="pyqt5"></a><strong>pyqt5</strong></h2><p>pyqt是个写windows界面的工具，</p><h2 id="mysql视图"><a href="#mysql视图" class="headerlink" title="mysql视图"></a><strong>mysql视图</strong></h2><p>视图是一个虚拟表，也就是sql查询结果，内容又查询定义<br>create view 视图名 as select 字段名 from 表明;</p><p>视图的好处：</p><ol><li>安全。一些数据表有着重要的数据，保密的，不能让用户直接看到，创建一个视图，保留一部分字段，让用户查询自己需要的字段，不能查看到保密的字段。<ol start="2"><li>性能。关系数据库的数据常常会分表存储，使用外键建立这些表的之间关系。</li><li>灵活。如果系统中有一张旧的表，这张表由于设计的问题，即将被废弃。然而，很多应用都是基于这张表，不易修改。这时就可以建立一张视图，视图中的数据直接映射到新建的表，这样，就可以少做修改，也达到了升级数据表的目的。</li></ol></li></ol><h2 id="首先得知道什么是框架"><a href="#首先得知道什么是框架" class="headerlink" title="首先得知道什么是框架"></a><strong>首先得知道什么是框架</strong></h2><p>开发一个应用跟建房子一样，需要先打基础，搭好骨架，然后一块砖一块砖叠上去。</p><p>而开发一个应用呢？<br>    同样需要一个好得架构设计，数据库建模，然后一个模块一个模块使用代码实现。<br>    如果开发应用不适用框架，和我们建房子，每一块砖，每一根钢筋都需要自己生产出来本质是一样得。<br>    显而易见，如果不适用框架，什么都自己去生产，可以一辈子都无法把房子建好。</p><h2 id="开发应用，使用框架得好处。"><a href="#开发应用，使用框架得好处。" class="headerlink" title="开发应用，使用框架得好处。"></a><strong>开发应用，使用框架得好处。</strong></h2><ol><li>大大提升开发效率</li><li>让应用开发更加规范，拓展性更强。</li><li>可以让我们把精力放在业务逻辑的实现上，而不是重复，而复杂的基础环境上（如web服务器，底层实现等）</li></ol><h2 id="什么时候使用django"><a href="#什么时候使用django" class="headerlink" title="什么时候使用django"></a><strong>什么时候使用django</strong></h2><p>Django ：大而全，功能及其强大，是python web 框架的先驱，用户多，第三方库及其丰富（如，restful，？）<br>自带：orm，后台管理，表单，模板，认证权限，session机制，缓存，文件管理<br>如果你关注产品的最终交付，想快速开发一个大的应用系统（如新闻类，商城，ERP等）。<br>建议使用 Django，</p><h2 id="什么时候使用flask"><a href="#什么时候使用flask" class="headerlink" title="什么时候使用flask"></a><strong>什么时候使用flask</strong></h2><p>Flask ： 小巧，灵活，自己决定定制那些功能，非常适合用于小型网站。</p><p>如果你想搞懂python web 开发WSGI协议原理以及实现过程，或者你想灵活定制组件，完全DIY你的应用。</p><h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a><strong>jwt</strong></h2><p>用session时，我们会把session存到redis中，当用户太多，影响到redis性能，就需要我们搭建redis集群，</p><p>如果我们使用jwt，<br>我们有 A页面，b页面，他们的域名不同，A服务器，B服务器，这是我在A域名下的页面登录了我们的账号，服务器并返回给了我们一个token并保存在前端locketstorge里，这时我们点击到了b页面，它对应的请求到了B服务器，而我们的b页面里的ls里并没为token，提示用户登录，b页面也是我们的子页面，用户的体验就贼差，用户可能会流失，这时我们在每个子页面里嵌套一个C页面，有我们的账号，密码的输入框，用户只要登录了，我们把返回来的token保存在C页面里的ls，我们b页面也嵌套了一个C页面，当我们点击去了b页面，这时他并不会去b页面的ls里找token，而是去B页面里的C里面的ls里去找token，一找有，这是就把token传到B服务器里，验证token。每个页面里的C页面就是同一个。<br>我们在我们的每个页面都嵌套一个 C 页面，（也就是登录那个框），只要</p><p>身份认证方案<br>jwt 特点 体积小，因而传输速度快<br>传输方式 可以通过 url/post参数/http头部等方式传输<br>支持跨域验证，可以应用于单点登录。</p><p>分为三段：<br>    1. 头部 （header）<br>    包含 类型（申明类型：jwt），加密算法（声明加密算法：HMAC,SHA256）<br>    2. 载荷<br>    存放有效信息的地方<br>    3. 签名<br>    对头图和载荷内容进行签名。如有人解码后修改信息，在编码，新的签名和之前的签名就不一样了<br>    他是不知道加密的用的密钥的，得出得签名也一定是不一样的，可以保证token不会被篡改。</p><pre><code>将拼接完的字符串用HS256算法进行加密。在加密的时候，我们还需要提供一个密钥（secret），类试盐。</code></pre><p>请求时可以放到header和Authorization</p><p>好处：</p><ol><li>性能问题，将用户状态分散到了客户端中，相比于session，可以明显减轻服务端的内存压力<ol start="2"><li>单点登录，应为存在客户端的，</li><li>前后端分离，</li><li>兼容性，支移动设备，支持跨程序调用，</li><li>可扩展性，jwt 无状态的，特别适合分布式站点的单点登录（sso）场合。</li><li>安全性，应为有签名，所以jwt可以防止被篡改</li></ol></li></ol><p>缺点：</p><ol><li>支持时效性，失效时间时固定的，解决 在redis 中 存储token，设置token的过期时间，每次鉴权都会去延长时间，<ol start="2"><li>jwt不适合存放大量信息，信息越多token越长。 </li></ol></li></ol><h2 id="jwt-的单处登录"><a href="#jwt-的单处登录" class="headerlink" title="jwt 的单处登录"></a><strong>jwt 的单处登录</strong></h2><p>​    如果我们的应用，只能在一个端登录，比如你在家用台式电脑登录了，你并没有下线，你上班到了公司，这时你使用了笔记本登录，然后你在家登录的账号就会被下线。也就是有且只能有一处在线上（我们必须要得到你最新的token）（单处：微信，qq，银行相关的）（多处：视频网站，一般最大登录上线3到5个，也就是拿最新的五个token）。</p><h2 id="restful-请求方式"><a href="#restful-请求方式" class="headerlink" title="restful  请求方式"></a><strong>restful  请求方式</strong></h2><p>​    get  post  put  delete</p><p>​    不用restful  我们需要自己定义路由，逻辑，数据（这些都需要我们自己手动实现）</p><p>​    而restful ， 他是一种面向资源的一种设计风格，我们只需要实现数据库，<br>​    我们只需要在他为我提供的url上，设置自己的参数，就可以，逻辑不需要我们关心，<br>​    为我提供了 权限（用户的权限不一样），限流（1分钟只能请求5次），过滤（根据标签筛选数据），排序（按照热度，价格），分页（一次给提供多少数据），<br>​    每一个请求相当于一条sql语句</p><h2 id="Python2-和-Python3-区别"><a href="#Python2-和-Python3-区别" class="headerlink" title="Python2   和   Python3   区别"></a><strong>Python2   和   Python3   区别</strong></h2><ol><li><p>核心类差异</p><ol><li>python3 对 Unicode 字符的原生支持 只支持unicdoe的string。<br>python2 中使用 ASCll 码作为默认编码方式导致 string 有两种类型 str 和 unicode</li><li>python3 import 是绝对路径，使用的相对路径</li><li>python2 中纯在老式类和新式类的区别，python3 统一采用新式类。新类必须继承object</li></ol><p>print 语句                   print 为一个方法<br>4个字节为一个字符              两个字节为一个字符<br>xrange                      range<br>map   返回的是一个list       返回的是一个迭代器</p></li></ol><h2 id="Python-源码研究过"><a href="#Python-源码研究过" class="headerlink" title="Python  源码研究过"></a><strong>Python  源码研究过</strong></h2><p>​    没有</p><h2 id="python-线程切换"><a href="#python-线程切换" class="headerlink" title="python  线程切换"></a><strong>python  线程切换</strong></h2><p>线程里包含着（data，code），我们把一个线程里的（数据，代码）装载到cpu中，（执行现场）里面的代码会去操作线程里的数据，当遇到，时间到了，io，iut，现在执行的代码和数据装出到来的线程里，然后执行下一个线程，依次类推</p><h2 id="MySQL优化"><a href="#MySQL优化" class="headerlink" title="MySQL优化"></a><strong>MySQL优化</strong></h2><p>不用 *<br>使用 索引<br>保证索引的正确性</p><h2 id="MySQL集群"><a href="#MySQL集群" class="headerlink" title="MySQL集群"></a><strong>MySQL集群</strong></h2><p>主从复制 主库开启blog日志，把所有的操作夺回记录到日志中，从库会开启的i/o 线程，去读取主库的blog，并写入从库的repaylog，从库会再开器一个线程及 sql线程，他会把 replay 里的所有操作依次读取给从库，从库依次执行，达到主从复制。<br>分库 你的用户表，商品表，把他们分别保存到不同的数据库，配置使用<br>分表 当你的用户数量到达一定的大的量了，我们就可以把他们分成10张表，分别存入不同的数据库，但是你的配置的中间件，mycat，让他分发你的请求到你的不同的数据库中，结果的地方，</p><h2 id="celery-和-rabbitMQ"><a href="#celery-和-rabbitMQ" class="headerlink" title="celery 和 rabbitMQ"></a><strong>celery 和 rabbitMQ</strong></h2><p>redis 有一个任务队列，保存任务celery拿到任务时执行结果有三种。</p><ol><li>执行成功<ol start="2"><li>执行了但没有成功的</li><li>直接没执行的<br>rabbitMQ 他有三个队列，（消息确认机制）</li><li>一个是任务队列（所有的任务都在里面）</li><li>有一个执行中的队列（就是正在执行中的任务队列）</li><li>执行完成的结果队列（这里面保存的必须是执行成功的结果）<br>而没有执行成功的会被重新放入到 第一个任务队列中，直至完成。</li></ol></li></ol><h2 id="requests-和-urllib-什么关系"><a href="#requests-和-urllib-什么关系" class="headerlink" title="requests  和  urllib  什么关系"></a><strong>requests  和  urllib  什么关系</strong></h2><p>requests 是 python 的三方库，获取数据<br>urllib 是 python 自带的库http请求库 自带四个模块  1. request ,  2. error(异常处理模块)，3. parse（工具模块）拆分，解析，合并等 4. robotparser（那些网站可以爬，那些不能爬）。</p><h2 id="git-工具"><a href="#git-工具" class="headerlink" title="git  工具"></a><strong>git  工具</strong></h2><p>我们每一个项目单独创建线上仓库，前后端分离的项目分别建两个仓库，以后缀作为区分<br>master 作为主分支也是线上生产环境的版本严谨commit，并且只有小组leader（领导）有 merge（合并）的权限。<br>deleop 分支作为开发分支，可以由开发人员进行merge（合并）<br>当发现master上有bug时，开一个hotfix，完成后合并到master分支<br>当有紧急需要修复时，没有时间开hotfix分支，侧直接回退版本号，以修护bug的优先级为最高</p><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git  fetch"></a><strong>git  fetch</strong></h2><p>​    git fetch [alias]  取某一个远程repo（回购）  也可以 git fetch –all 取到全部repo fetch将会取到所有你本    地没有的数据，所有取下来的分支可以被叫做remote branches，他们和本地分支一样，</p><p>但是 git 不允许你 checkout 它们</p><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git  rebase"></a><strong>git  rebase</strong></h2><p>​    把分支整个全部添加到另一个主分支上<br>​    不会产生合并的提交，他会将本地的所有提交临时保存为补丁（patch），</p><h2 id="docker-用过嘛"><a href="#docker-用过嘛" class="headerlink" title="docker 用过嘛"></a><strong>docker 用过嘛</strong></h2><p>关于容器的命令<br>　　查看容器：docker ps -a</p><p>　　查看哪些是停止的容器：docker ps -a -p </p><p>　　启动一个容器：docker start 容器ID</p><p>　　创建启动一个容器：docker run</p><p>　　创建一个容器起别名并分配一个为终端：docker run -name mysql_test -it mysql /bin/bash</p><p>　　停止容器：docker stop 容器ID</p><p>　　进入容器：docker exec -it 容器ID</p><p>　　删除容器：docker rm [OPTIONS] 容器名</p><p>　　　　其中options有三种类型：</p><p>　　　　　　-f ：通过SIGKILL信号强制删除一个运行中的容器</p><p>　　　　　　-l ：移除容器间的网络连接，而非容器本身</p><p>　　　　　　-v ：-v 删除与容器关联的卷</p><h2 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a><strong>k8s</strong></h2><p>k8s 是为容器服务而生的一个可移植容器的编排管理工具，管理docekr容器的。</p><p>如果我们使用的时Django框架，我们框架里有使用了mysql，es（依赖mysql），redis（也依赖mysql），celery（依赖redis）, 最后是Django，那我们先直接开启django，是不是会报错，应为他依赖我们自己搭建的服务，所以我们就是用k8s 来给他编排一个启动循序，先启动django需要的服务，最后启动django，<br>按照依赖关系依次编排让后启动</p><p>k8s实现了什么？<br>    从架构设计层面，我们关注的可用性，伸缩性都可以结合k8s得到很多得解决，<br>优点：<br>    1. 服务发现于调度<br>    2. 负载均衡<br>    3. 服务自愈<br>    4. 服务弹性扩展<br>    5. 横向扩容<br>    6. 存储卷挂载<br>k8s 集群由Master 节点和Node 节点组成。<br>Master节点：<br>    指的是集群控制节点，管理和控制整个集群，基本上k8s的所有控制命令都发给他，她负责具体的执行过程<br>    1. Kubernetes Controller Manager（kube-controller-manager）：k8s中所有资源对象的自动化控制中心，维护管理集群的状态，比如故障检测，自动扩展，滚动更新等。<br>    2. Kubernetes Scheduler（kube-scheduler）： 负责资源调度，按照预定的调度策略将Pod调度到相应的机器上。<br>    3. etcd：保存整个集群的状态。</p><p>Node节点：<br>    被称为Node或者Worker节点，可以在Master中使用命令 kubectl get nodes 查看集群中的node节点。每一个node都会被Master分配一些工作负载，当某个Node宕机时，该节点上的工作负载就会被Master自动转换到其他节点。</p><ol><li>kubelet：负责pod对应的容器的创建，启等任务，同时与Master密切协作，实现集群管理的基本功能<ol start="2"><li>kube—proxy: 实现service的通信与负载均衡</li><li>docker ：Docker引擎，负责本机的容器创建和管理。    </li></ol></li></ol><h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a><strong>websocket</strong></h2><p>​    基于tcp协议的全双工通信协议，只需要一个tcp连接，就会保持一个长连接，为客户端推送消息</p><p>网络七成协议</p><p>​    应用层 http https<br>​    传输层 tcp   udp<br>​    网络层  路由器<br>​    数据连路层 网桥，交换机 （arp）<br>​    物理层 网卡，网线</p><h2 id="TCP和Udp的区别"><a href="#TCP和Udp的区别" class="headerlink" title="TCP和Udp的区别"></a><strong>TCP和Udp的区别</strong></h2><p> UDP</p><ol><li>面向无连接<br>udp不需要进行三次握手，想发数据就发，不会对数据报文进行任何拆分和拼接操作<br>具体说：<pre><code>发送端，应用层将数据传递给传输层的udp协议，udp只会给数据增加一个udp头标识下的udp协议，然后传递给网络层接收端，网络层将数据传递给传输层，udp只去除ip报文头就传递给应用层，不会任何拼接操作</code></pre></li><li>有单播，多播，广播的功能<br>udo 支持1对1，1对多，多对多，多对1，</li><li>udp 面向报文的<br>传输速度快，可以允许一定的数据丢失</li><li>不可靠<br>体现在无连接，通信都不需要建立链接，想法就发，这样的情况肯定不可靠<br>接到什么数据就发什么数据，不会备份，不管对方收没收到</li></ol><p>TCP<br>必须建立链接<br>三次握手:<br>    第一次：客向服发送链接请求，报文中包含自身数据通讯初始号，请求发送后，客户端进入syn-sent(请求连接)状态。<br>    第二次：服务端收到连接请求报文后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始号，发送完成后便进入 SYN-RECEIVED 状态。<br>    第三次：客户端收到连接同意的应答后，还要向服务端发送一个确认报文。</p><p>Tcp协议的特点:<br>    面向连接<br>    仅支持单播传输<br>    面向字节流<br>    可靠传输<br>    tcp提供全双工通信</p><h2 id="linux系统操作"><a href="#linux系统操作" class="headerlink" title="linux系统操作"></a><strong>linux系统操作</strong></h2><ol><li>查看内存 ： free</li><li>查看文件大小：ll -h  ‘文件目录’</li></ol><p>​    ll  -h /proc/kcore</p><ol start="3"><li>控制用户对文件的权限的命令 ：chomd<ol><li>分为三级：文件所有者，用户组，其他用户</li><li>chomd 777 file 或则   chomd abc file</li><li>其中 a,b,c 各为一个数字，分别表示User，Group，及Other权限。</li><li>r = 4 , w = 2  x = 1</li></ol></li></ol><p>​    </p><h2 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a><strong>vim编辑器</strong></h2><ol><li>查找和替换<ol><li>在普通模式下，可使用 / (斜线键) 来查找文本，</li><li>按 n 键 表示下一个</li><li>vim 也有独有的用来移动光标命令。<ol><li>h  : 左移一个字符</li><li>j   ：下一一个字符</li><li>k  ： 上移一个字符</li><li>l    ：右移一个字符</li><li>Ctrl + F  :  下翻一屏</li><li>Ctrl + B  :  上翻一屏</li><li>G   ： 移动到缓冲区最后一行</li><li>num G : 移动缓存区第 num 行</li><li>gg ： 移动缓存冲区第一行</li></ol></li></ol></li></ol><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>​    如果我用别人的方法，我的反射一下他代码里是否有我想要的方法，如果有我才调用</p><h2 id="高并发："><a href="#高并发：" class="headerlink" title="高并发："></a>高并发：</h2><p>​    加服务器，增加缓存，负载均衡，配置主从，把读得压力给从库，写的压力太大，分库 分表</p><p>你得有多个服务器，负载均衡，把请求分发给多个服务器，</p><h2 id="网站请求过程"><a href="#网站请求过程" class="headerlink" title="网站请求过程"></a>网站请求过程</h2><p>​    1. 我们知道域名，通过DNS解析成得到IP（http:80 http:443,没写的情况下)，</p><ol start="2"><li>拿到ip地址，然后通过 tcp 三次握手建立连接，客户端发送http request ，服务端接收到请求，返回 http response。</li><li>浏览器拿到响应body，渲染页面。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 权限 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Websocket</title>
      <link href="2020/09/26/websocket/"/>
      <url>2020/09/26/websocket/</url>
      
        <content type="html"><![CDATA[<h2 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h2><p>​    WebSocket 协议本质上是一个<strong>基于 TCP 的协议</strong>。</p><p>​    WebSocket 是 HTML5 开始提供的一种在单个 <strong>TCP 连接</strong>上进行<strong>全双工通讯</strong>的协议。</p><p>​    WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端<strong>主动</strong>向客户端<strong>推送数据</strong>。在 WebSocket API 中，浏览器和服务器只需要<strong>完成一次握手</strong>，两者之间就直接可以<strong>创建持久性的连接</strong>，<strong>并进行双向数据传输。</strong></p><p>​    WebSocket 协议，能更好的<strong>节省服务器资源</strong>和<strong>带宽</strong>，并且能够更<strong>实时地进行通讯</strong>。</p><p><strong>说到 websocket 我觉得有必要说下跟 socket 的区别。</strong></p><p><strong>软件通信有七层结构，下三层结构偏向与数据通信，上三层更偏向于数据处理，中间的传输层则是连接上三层与下三层之间的桥梁，每一层都做不同的工作，上层协议依赖与下层协议。基于这个通信结构的概念。</strong></p><p><strong>Socket 其实并不是一个协议，是应用层与 TCP/IP 协议族通信的中间软件抽象层，它是一组接口。当两台主机通信时，让 Socket 去组织数据，以符合指定的协议。TCP 连接则更依靠于底层的 IP 协议，IP 协议的连接则依赖于链路层等更低层次。</strong></p><p><strong>WebSocket 则是一个典型的应用层协议。</strong></p><p><strong>总的来说：Socket 是传输控制层协议，WebSocket 是应用层协议。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> socket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信三方登录流程</title>
      <link href="2020/09/26/wei-xin/"/>
      <url>2020/09/26/wei-xin/</url>
      
        <content type="html"><![CDATA[<h3 id="微信三方登录"><a href="#微信三方登录" class="headerlink" title="微信三方登录"></a>微信三方登录</h3><h3 id="OAUTH-2-0"><a href="#OAUTH-2-0" class="headerlink" title="OAUTH 2.0"></a>OAUTH 2.0</h3><p>​    OAUTH 是一种开放的协议，为桌面程序或者基于BS的web应用提供了一种简单，标准的方式访问去访问需要用户授权的API服务。</p><h4 id="简单的来说，OAUTH认证授权就三个步骤，三句话可以概括："><a href="#简单的来说，OAUTH认证授权就三个步骤，三句话可以概括：" class="headerlink" title="简单的来说，OAUTH认证授权就三个步骤，三句话可以概括："></a>简单的来说，OAUTH认证授权就三个步骤，三句话可以概括：</h4><pre><code>1. 获取未授权的Request Token 2. 获取用户授权的Request Token 3. 用授权的Request Token换取Access Token</code></pre><ol><li>当我们的网站需接入微信登陆时，会引导用户（通过微信logo或其他图示）跳转到微信的登陆授权页面，此时把之前申请的appID带给登陆授权页面。</li><li>用户确认后得到授权，微信会返回一个临时的code给我们，通过code来确认是否微信登录了，code 作为换取access_token的票据，每次授权带上的code不一样，</li><li>接受到code后，并取出，再次向微信发起请求，带上code从微信服务器获取access_token，Openid</li><li>我们网站获取到access_token后就可以调用微信提供的接口了，比如获取用户信息等，则此时开发者可以通过access_token和openid拉取用户信息了。</li></ol><p><strong>总结一下，整个登录流程为获取Code-&gt;用Code获取AccessToken和OpenId（和UnionId）-&gt;用AccessToken获取微信用户的微信信息。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 三方登录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/09/26/ti-ku/"/>
      <url>2020/09/26/ti-ku/</url>
      
        <content type="html"><![CDATA[<h4 id="1-What-is-the-difference-between-list-and-tuples-in-python-？（-列-表-和-元-组-有-什-么-区-别-）"><a href="#1-What-is-the-difference-between-list-and-tuples-in-python-？（-列-表-和-元-组-有-什-么-区-别-）" class="headerlink" title="1.    What     is    the    difference    between    list    and    tuples    in    python    ？（    列    表    和    元    组    有    什    么    区    别    ?    ）"></a>1.    What     is    the    difference    between    list    and    tuples    in    python    ？（    列    表    和    元    组    有    什    么    区    别    ?    ）</h4><h2 id=""><a href="#" class="headerlink" title=""></a></h2><hr><h4 id="2-What-is-pep-8？（-什-么-是-pep8-）"><a href="#2-What-is-pep-8？（-什-么-是-pep8-）" class="headerlink" title="2.    What     is    pep 8？（    什    么    是    pep8    ?    ）"></a>2.    What     is    pep 8？（    什    么    是    pep8    ?    ）</h4><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><hr><h4 id="3-What-is-PYTHONPATH？（-什-么-是-导-包-路-径-PYTHONPATH-）"><a href="#3-What-is-PYTHONPATH？（-什-么-是-导-包-路-径-PYTHONPATH-）" class="headerlink" title="3.    What    is    PYTHONPATH？（    什    么    是    导    包    路    径    PYTHONPATH    ?    ）"></a>3.    What    is    PYTHONPATH？（    什    么    是    导    包    路    径    PYTHONPATH    ?    ）</h4><hr><h4 id="4-What-are-python-modules-Name-some-commonly-used-built-modules-in-Python？（-什-么-是-模-块，内-置-常-用-模-块-有-哪-些-）"><a href="#4-What-are-python-modules-Name-some-commonly-used-built-modules-in-Python？（-什-么-是-模-块，内-置-常-用-模-块-有-哪-些-）" class="headerlink" title="4.    What     are    python    modules?    Name    some    commonly    used    built    modules    in    Python？（    什    么    是    模    块，内    置    常    用    模    块    有    哪    些    ?    ）"></a>4.    What     are    python    modules?    Name    some    commonly    used    built    modules    in    Python？（    什    么    是    模    块，内    置    常    用    模    块    有    哪    些    ?    ）</h4><hr><h4 id="5-What-are-local-variables-and-global-variables-in-Python-Write-an-example-please-什-么-是-本-地-变-量，全-局-变-量，写-个-例-子"><a href="#5-What-are-local-variables-and-global-variables-in-Python-Write-an-example-please-什-么-是-本-地-变-量，全-局-变-量，写-个-例-子" class="headerlink" title="5.    What    are    local    variables    and    global    variables    in    Python    ?    Write    an    example     please.    (    什    么    是    本    地    变    量，全    局    变    量，写    个    例    子)"></a>5.    What    are    local    variables    and    global    variables    in    Python    ?    Write    an    example     please.    (    什    么    是    本    地    变    量，全    局    变    量，写    个    例    子)</h4><hr><h4 id="6-What-is-init-And-the-difference-between-init-and-new-什-么-是-init-方-法，和-new-方-法-有-什-么-区-别"><a href="#6-What-is-init-And-the-difference-between-init-and-new-什-么-是-init-方-法，和-new-方-法-有-什-么-区-别" class="headerlink" title="6.    What     is    init?    And    the    difference    between    init    and    new?    (    什    么    是    init    方    法，和    new    方    法    有    什    么    区    别    ?    )"></a>6.    What     is    <strong>init</strong>?    And    the    difference    between    <strong>init</strong>    and    <strong>new</strong>?    (    什    么    是    <strong>init</strong>    方    法，和    <strong>new</strong>    方    法    有    什    么    区    别    ?    )</h4><hr><h4 id="7-What-is-a-lambda-function-什-么-是-lambda-表-达-式"><a href="#7-What-is-a-lambda-function-什-么-是-lambda-表-达-式" class="headerlink" title="7.    What     is    a    lambda    function    ?    (    什    么    是    lambda    表    达    式    ?    )"></a>7.    What     is    a    lambda    function    ?    (    什    么    是    lambda    表    达    式    ?    )</h4><hr><h4 id="8-What-is-self-in-Python-self-是-什-么"><a href="#8-What-is-self-in-Python-self-是-什-么" class="headerlink" title="8.    What     is    self    in    Python    ?    (    self    是    什    么    ?    )"></a>8.    What     is    self    in    Python    ?    (    self    是    什    么    ?    )</h4><hr><h4 id="9-How-can-you-randomize-the-items-of-a-list-in-place-in-Python-如-何-打-散-一-个-列-表"><a href="#9-How-can-you-randomize-the-items-of-a-list-in-place-in-Python-如-何-打-散-一-个-列-表" class="headerlink" title="9.    How    can    you    randomize    the    items    of    a    list    in    place    in    Python    ?    (    如    何    打    散    一    个    列    表    ?    )"></a>9.    How    can    you    randomize    the    items    of    a    list    in    place    in    Python    ?    (    如    何    打    散    一    个    列    表    ?    )</h4><hr><h4 id="10-What-are-python-iterators-Write-an-example-please-什-么-是-迭-代-器，写-个-例-子"><a href="#10-What-are-python-iterators-Write-an-example-please-什-么-是-迭-代-器，写-个-例-子" class="headerlink" title="10.    What     are    python    iterators?    Write    an    example    please        (    什    么    是    迭    代    器，写    个    例    子    ?    )"></a>10.    What     are    python    iterators?    Write    an    example    please        (    什    么    是    迭    代    器，写    个    例    子    ?    )</h4><hr><h4 id="11-What-is-the-difference-between-range-amp-xrange-range-和-xrange-有-什-么-区-别"><a href="#11-What-is-the-difference-between-range-amp-xrange-range-和-xrange-有-什-么-区-别" class="headerlink" title="11.    What     is    the    difference    between    range    &amp;    xrange    ?    (    range    和    xrange    有    什    么    区    别    ?    )"></a>11.    What     is    the    difference    between    range    &amp;    xrange    ?    (    range    和    xrange    有    什    么    区    别    ?    )</h4><hr><h4 id="12-What-is-pickling-and-unpickling-python-的-二-进-制-序-列-化-和-反-序-列-化"><a href="#12-What-is-pickling-and-unpickling-python-的-二-进-制-序-列-化-和-反-序-列-化" class="headerlink" title="12.    What     is    pickling    and    unpickling    ?    (    python    的    二    进    制    序    列    化    和    反    序    列    化    ?    )"></a>12.    What     is    pickling    and    unpickling    ?    (    python    的    二    进    制    序    列    化    和    反    序    列    化    ?    )</h4><hr><h4 id="13-What-are-the-generators-in-python-什-么-是-生-成-器"><a href="#13-What-are-the-generators-in-python-什-么-是-生-成-器" class="headerlink" title="13.    What     are    the    generators    in    python    ?    (    什    么    是    生    成    器    ?    )"></a>13.    What     are    the    generators    in    python    ?    (    什    么    是    生    成    器    ?    )</h4><hr><h4 id="14-How-will-you-convert-a-string-to-all-lowercase-如-何-把-字-符-串-装-成-全-小-写"><a href="#14-How-will-you-convert-a-string-to-all-lowercase-如-何-把-字-符-串-装-成-全-小-写" class="headerlink" title="14.    How    will    you    convert    a    string    to    all    lowercase    ?    (    如    何    把    字    符    串    装    成    全    小    写    ?    )"></a>14.    How    will    you    convert    a    string    to    all    lowercase    ?    (    如    何    把    字    符    串    装    成    全    小    写    ?    )</h4><hr><h4 id="15-What-is-the-purpose-of-is-not-and-in-operators-is-and-not-这-些-操-作-符-的-含-义"><a href="#15-What-is-the-purpose-of-is-not-and-in-operators-is-and-not-这-些-操-作-符-的-含-义" class="headerlink" title="15.    What     is    the    purpose    of    is,    not    and    in    operators    ?    (    is    and    not    这    些    操    作    符    的    含    义    ?    )"></a>15.    What     is    the    purpose    of    is,    not    and    in    operators    ?    (    is    and    not    这    些    操    作    符    的    含    义    ?    )</h4><hr><h4 id="16-What-is-the-usage-of-help-and-dir-function-in-Python-help-和-dir-函-数-做-什-么-用-的"><a href="#16-What-is-the-usage-of-help-and-dir-function-in-Python-help-和-dir-函-数-做-什-么-用-的" class="headerlink" title="16.    What     is    the    usage    of    help( )    and    dir( )    function    in    Python    ?    (    help    和    dir    函    数    做    什    么    用    的    ?    )"></a>16.    What     is    the    usage    of    help( )    and    dir( )    function    in    Python    ?    (    help    和    dir    函    数    做    什    么    用    的    ?    )</h4><hr><h4 id="17-What-is-a-dictionary-in-Python-字-典-是-什-么"><a href="#17-What-is-a-dictionary-in-Python-字-典-是-什-么" class="headerlink" title="17.    What     is    a    dictionary    in    Python    ?    (    字    典    是    什    么    ?    )"></a>17.    What     is    a    dictionary    in    Python    ?    (    字    典    是    什    么    ?    )</h4><hr><h4 id="18-What-does-this-mean-args-kwargs-And-why-would-we-use-it-args-和-kwargs-是-什-么-作-用"><a href="#18-What-does-this-mean-args-kwargs-And-why-would-we-use-it-args-和-kwargs-是-什-么-作-用" class="headerlink" title="18.    What     does    this    mean: *args, **kwargs    ?    And    why    would    we    use    it    ?    (    args    和    kwargs    是    什    么    作    用    ?    )"></a>18.    What     does    this    mean: *args, **kwargs    ?    And    why    would    we    use    it    ?    (    args    和    kwargs    是    什    么    作    用    ?    )</h4><hr><h4 id="19-What-does-len-do-len-函-数-做-什-么-的"><a href="#19-What-does-len-do-len-函-数-做-什-么-的" class="headerlink" title="19.    What     does    len( )    do    ?    (    len    函    数    做    什    么    的    ?    )"></a>19.    What     does    len( )    do    ?    (    len    函    数    做    什    么    的    ?    )</h4><hr><h4 id="20-Explain-split-sub-subn-methods-of-“re”-module-in-Python-解-释-一-下-re-模-块-里-的-split-sub-subn-函-数"><a href="#20-Explain-split-sub-subn-methods-of-“re”-module-in-Python-解-释-一-下-re-模-块-里-的-split-sub-subn-函-数" class="headerlink" title="20.    Explain    split( ),sub( ),subn( )    methods    of    “re”    module    in    Python    (    解    释    一    下    re    模    块    里    的    split    sub    subn    函    数    )"></a>20.    Explain    split( ),sub( ),subn( )    methods    of    “re”    module    in    Python    (    解    释    一    下    re    模    块    里    的    split    sub    subn    函    数    )</h4><hr><h4 id="21-What-are-negative-indexes-and-why-are-they-used-什-么-是-负-索-引，为-什-么-使-用-它-们"><a href="#21-What-are-negative-indexes-and-why-are-they-used-什-么-是-负-索-引，为-什-么-使-用-它-们" class="headerlink" title="21.    What     are    negative    indexes    and    why    are    they    used    ?    (    什    么    是    负    索    引，为    什    么    使    用    它    们    ?    )"></a>21.    What     are    negative    indexes    and    why    are    they    used    ?    (    什    么    是    负    索    引，为    什    么    使    用    它    们    ?    )</h4><hr><h4 id="22-How-can-files-be-deleted-in-Python-如-何-在-Python-中-删-除-文-件"><a href="#22-How-can-files-be-deleted-in-Python-如-何-在-Python-中-删-除-文-件" class="headerlink" title="22.    How    can    files    be    deleted    in    Python    ?    (    如    何    在    Python    中    删    除    文    件    ?    )"></a>22.    How    can    files    be    deleted    in    Python    ?    (    如    何    在    Python    中    删    除    文    件    ?    )</h4><hr><h4 id="23-What-advantages-do-NumPy-arrays-offer-over-nested-python-lists-使-用-Numpy-中-的-数-组-比-python-列-表-有-哪-些-好-处"><a href="#23-What-advantages-do-NumPy-arrays-offer-over-nested-python-lists-使-用-Numpy-中-的-数-组-比-python-列-表-有-哪-些-好-处" class="headerlink" title="23.    What    advantages    do    NumPy    arrays    offer    over (nested)    python    lists    ?    (    使    用    Numpy    中    的    数    组    比    python    列    表    有    哪    些    好    处    ?    )"></a>23.    What    advantages    do    NumPy    arrays    offer    over (nested)    python    lists    ?    (    使    用    Numpy    中    的    数    组    比    python    列    表    有    哪    些    好    处    ?    )</h4><hr><h4 id="24-How-to-add-values-to-a-python-array-And-how-to-remove-values-to-a-python-array-数-组-如-何-添-加-一-个-值，移-除-一-个-值"><a href="#24-How-to-add-values-to-a-python-array-And-how-to-remove-values-to-a-python-array-数-组-如-何-添-加-一-个-值，移-除-一-个-值" class="headerlink" title="24.    How    to    add    values    to    a    python    array?    And    how    to    remove    values    to    a    python    array    ?    (    数    组    如    何    添    加    一    个    值，移    除    一    个    值    ?    )"></a>24.    How    to    add    values    to    a    python    array?    And    how    to    remove    values    to    a    python    array    ?    (    数    组    如    何    添    加    一    个    值，移    除    一    个    值    ?    )</h4><hr><h4 id="25-What-is-the-difference-between-deep-and-shallow-copy-深-拷-贝-浅-拷-贝-区-别"><a href="#25-What-is-the-difference-between-deep-and-shallow-copy-深-拷-贝-浅-拷-贝-区-别" class="headerlink" title="25.    What    is    the    difference    between    deep    and    shallow    copy    ?    (    深    拷    贝    浅    拷    贝    区    别    ?    )"></a>25.    What    is    the    difference    between    deep    and    shallow    copy    ?    (    深    拷    贝    浅    拷    贝    区    别    ?    )</h4><hr><h4 id="26-Explain-Inheritance-in-Python-with-an-example-解-释-一-下-Python-中-的-继-承"><a href="#26-Explain-Inheritance-in-Python-with-an-example-解-释-一-下-Python-中-的-继-承" class="headerlink" title="26.    Explain    Inheritance    in    Python    with    an    example    ?    (    解    释    一    下    Python    中    的    继    承    ?    )"></a>26.    Explain    Inheritance    in    Python    with    an    example    ?    (    解    释    一    下    Python    中    的    继    承    ?    )</h4><hr><h4 id="27-What-does-an-object-do-object-是-干-嘛-的"><a href="#27-What-does-an-object-do-object-是-干-嘛-的" class="headerlink" title="27.    What    does    an    object( )    do    ?    (    object( )    是    干    嘛    的    ?    )"></a>27.    What    does    an    object( )    do    ?    (    object( )    是    干    嘛    的    ?    )</h4><hr><h4 id="28-Write-codes-to-implement-a-simple-Singleton-怎-么-实-现-一-个-单-例-模-式"><a href="#28-Write-codes-to-implement-a-simple-Singleton-怎-么-实-现-一-个-单-例-模-式" class="headerlink" title="28.    Write    codes    to    implement    a    simple    Singleton    ?    (    怎    么    实    现    一    个    单    例    模    式    ?    )"></a>28.    Write    codes    to    implement    a    simple    Singleton    ?    (    怎    么    实    现    一    个    单    例    模    式    ?    )</h4><hr><h4 id="29-What-is-Duck-typing-什-么-是-鸭-子-类-型"><a href="#29-What-is-Duck-typing-什-么-是-鸭-子-类-型" class="headerlink" title="29.    What    is    Duck - typing    ?    (    什    么    是    鸭    子    类    型    ?    )"></a>29.    What    is    Duck - typing    ?    (    什    么    是    鸭    子    类    型    ?    )</h4><hr><h4 id="30-What-is-GIL-Coroutine-什-么-是-GIL-什-么-是-携-程"><a href="#30-What-is-GIL-Coroutine-什-么-是-GIL-什-么-是-携-程" class="headerlink" title="30.    What    is    GIL,    Coroutine    ?    (    什    么    是    GIL    什    么    是    携    程    ?    )"></a>30.    What    is    GIL,    Coroutine    ?    (    什    么    是    GIL    什    么    是    携    程    ?    )</h4><hr><h4 id="31-Explain-the-select-poll-and-epoll-and-What-is-Level-trigger-and-Edge-trigger-解-释-select-poll-epoll-是-什-么-也-说-下-什-么-是-水-平-触-发-什-么-是-边-界-触-发"><a href="#31-Explain-the-select-poll-and-epoll-and-What-is-Level-trigger-and-Edge-trigger-解-释-select-poll-epoll-是-什-么-也-说-下-什-么-是-水-平-触-发-什-么-是-边-界-触-发" class="headerlink" title="31.    Explain    the    select,    poll    and    epoll.    and    What    is    Level-trigger    and    Edge-trigger    ?    (    解    释    select    poll    epoll    是    什    么    也    说    下    什    么    是    水    平    触    发    什    么    是    边    界    触    发    ?    )"></a>31.    Explain    the    select,    poll    and    epoll.    and    What    is    Level-trigger    and    Edge-trigger    ?    (    解    释    select    poll    epoll    是    什    么    也    说    下    什    么    是    水    平    触    发    什    么    是    边    界    触    发    ?    )</h4><hr><h4 id="32-Discuss-Django-architecture-说-一-下-django-的-结-构-或-者-架-构"><a href="#32-Discuss-Django-architecture-说-一-下-django-的-结-构-或-者-架-构" class="headerlink" title="32.    Discuss    Django    architecture    .    (    说    一    下    django    的    结    构    或    者    架    构    )"></a>32.    Discuss    Django    architecture    .    (    说    一    下    django    的    结    构    或    者    架    构    )</h4><hr><h4 id="33-Explain-how-you-can-set-up-the-Database-in-Django-Django-中-数-据-库-如-何-配-置，都-设-置-哪-些"><a href="#33-Explain-how-you-can-set-up-the-Database-in-Django-Django-中-数-据-库-如-何-配-置，都-设-置-哪-些" class="headerlink" title="33.    Explain    how    you    can    set    up    the    Database    in    Django    ?    (    Django    中    数    据    库    如    何    配    置，都    设    置    哪    些    ?    )"></a>33.    Explain    how    you    can    set    up    the    Database    in    Django    ?    (    Django    中    数    据    库    如    何    配    置，都    设    置    哪    些    ?    )</h4><hr><h4 id="34-Give-an-example-how-you-can-write-a-VIEW-in-Django-在-Django-你-是-如-何-写-一-个-view"><a href="#34-Give-an-example-how-you-can-write-a-VIEW-in-Django-在-Django-你-是-如-何-写-一-个-view" class="headerlink" title="34.    Give    an    example    how    you    can    write    a    VIEW    in    Django    ?    (    在    Django    你    是    如    何    写    一    个    view    ?    )"></a>34.    Give    an    example    how    you    can    write    a    VIEW    in    Django    ?    (    在    Django    你    是    如    何    写    一    个    view    ?    )</h4><hr><h4 id="35-Explain-the-use-of-session-in-Django-framework-解-释-一-下-django-中-session-的-使-用"><a href="#35-Explain-the-use-of-session-in-Django-framework-解-释-一-下-django-中-session-的-使-用" class="headerlink" title="35.    Explain    the    use    of    session    in    Django    framework    ?    (    解    释    一    下    django    中    session    的    使    用    ?    )"></a>35.    Explain    the    use    of    session    in    Django    framework    ?    (    解    释    一    下    django    中    session    的    使    用    ?    )</h4><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单列模式</title>
      <link href="2020/09/21/dan-lie-mo-shi/"/>
      <url>2020/09/21/dan-lie-mo-shi/</url>
      
        <content type="html"><![CDATA[<ol><li><h3 id="单列模式"><a href="#单列模式" class="headerlink" title="单列模式"></a>单列模式</h3><p>​    单列模式 是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实列存在。当你希望在整个系统中，某个类只能出现一个实列时，单列对象就能派上用场。</p><p>​    其实，python 的模式就是天然的单列模式，应为模块在第一次导入时，会生成.pyc文件。当第二次导入时，就会直接加载.pyc文件，而不会在执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单列对象。</p></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SingLeton</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>singleton <span class="token operator">=</span> SingLeton<span class="token punctuation">(</span><span class="token punctuation">)</span>直接在其他文件中导入此文件中的对象，就是一个单列模式的对象<span class="token keyword">from</span> a <span class="token keyword">import</span> singleton</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORM</title>
      <link href="2020/09/20/django-orm/"/>
      <url>2020/09/20/django-orm/</url>
      
        <content type="html"><![CDATA[<h2 id="Django-ORM"><a href="#Django-ORM" class="headerlink" title="Django ORM"></a>Django ORM</h2><p>Django 模型使用自带的 ORM。</p><p>对象关系映射（Object Relational Mapping，简称 ORM ）用于实现面向对象编程语言里不同类型系统的数据之间的转换。</p><p>ORM 在业务逻辑层和数据库层之间充当了桥梁的作用。</p><p>ORM 是通过使用描述对象和数据库之间的映射的元数据，将程序中的对象自动持久化到数据库中。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/05/django-orm1.png" alt="img"></p><p>使用 ORM 的好处：</p><ul><li>提高开发效率。</li><li>不同数据库可以平滑切换。</li></ul><p>使用 ORM 的缺点：</p><ul><li>ORM 代码转换为 SQL 语句时，需要花费一定的时间，执行效率会有所降低。</li><li>长期写 ORM 代码，会降低编写 SQL 语句的能力。</li></ul><p>ORM 解析过程:</p><ul><li>1、ORM 会将 Python 代码转成为 SQL 语句。</li><li>2、SQL 语句通过 pymysql 传送到数据库服务端。</li><li>3、在数据库中执行 SQL 语句并将结果返回。</li></ul><p>ORM 对应关系表：</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/05/orm-object.png" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 索引结构的实现+事物级别</title>
      <link href="2020/09/19/mysql-suo-yin-jie-gou-de-shi-xian-shi-wu-ji-bie/"/>
      <url>2020/09/19/mysql-suo-yin-jie-gou-de-shi-xian-shi-wu-ji-bie/</url>
      
        <content type="html"><![CDATA[<h3 id="Mysql-索引结构的实现"><a href="#Mysql-索引结构的实现" class="headerlink" title="Mysql 索引结构的实现"></a>Mysql 索引结构的实现</h3><h4 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h4><p>​        索引（Index）是帮助数据库高效获取数据的数据结构。索引是在基于数据库表创建的，他包含一个表中某些列的值以及记录对应的地址，并且把这些值存储在一个数据结构中，最常见的就是使用哈希表，B+树做为索引。</p><h4 id="Mysql-索引的数据结构：B-Tree"><a href="#Mysql-索引的数据结构：B-Tree" class="headerlink" title="Mysql 索引的数据结构：B+Tree"></a>Mysql 索引的数据结构：B+Tree</h4><p>​        索引非常大，不能全部存储到内存中，索引是以索引文件的形式存储在磁盘上，索引查询会产生磁盘I/O的消耗，索引的优劣重要指标就是I/O 的 操作次数。</p><p>​        尽量减少磁盘的 I/O 可以提高效率， </p><p>​    </p><p><strong>Mysql索引的数据结构之所以选择B+树而不是B树，是因为它内节点不存储data，这样一个节点就可以存储更多的key。</strong></p><p><strong>Mysql两个存储引擎MyISAM和InnoDB的索引</strong>区别：</p><p><img src="https://img-blog.csdn.net/20180905234629239?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NDYyMzg3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><img src="https://img-blog.csdn.net/20180905234814946?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NDYyMzg3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>一是主索引的区别，InnoDB的数据文件就是索引文件。而 MyISAM 的索引和数据的分开的。</p><p>二是辅助索引的区别：InnoDB的辅助索引data域存储相应记录主键的值而不是地址，而MYISAM 的辅助索引和主索引没有多大区别。</p><h2 id="MySQL中MyISAM与InnoDB区别及选择"><a href="#MySQL中MyISAM与InnoDB区别及选择" class="headerlink" title="MySQL中MyISAM与InnoDB区别及选择"></a>MySQL中MyISAM与InnoDB区别及选择</h2><table><thead><tr><th><strong>InnoDB</strong></th><th><strong>MyISAM</strong></th></tr></thead><tbody><tr><td>支持事务处理</td><td>不支持事务，回滚将造成不完全回滚，不具有原子性</td></tr><tr><td>支持外键</td><td>不支持外键</td></tr><tr><td>支持行锁</td><td>支持全文搜索</td></tr><tr><td>不保存表的具体行数，扫描表来计算有多少行</td><td>保存表的具体行数,不带where时，直接返回保存的行数</td></tr><tr><td>DELETE 表时，是一行一行的删除</td><td>DELETE 表时，先drop表，然后重建表</td></tr><tr><td>InnoDB中必须包含AUTO_INCREMENT类型字段的索引</td><td>MyISAM中可以使AUTO_INCREMENT类型字段建立联合索引</td></tr><tr><td>表格很难被压缩</td><td>表格可以被压缩</td></tr><tr><td>跨平台可直接拷贝使用</td><td>跨平台不可直接拷贝使用</td></tr></tbody></table><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结</strong>：</h2><p>​     在大数据量，高并发量的互联网业务场景下，对于MyISAM和InnoDB</p><ul><li><p>有where条件，count(*)两个存储引擎性能差不多</p></li><li><p>不要使用全文索引，应当使用《<a href="http://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651959917&amp;idx=1&amp;sn=8faeae7419a756b0c355af2b30c255df&amp;chksm=bd2d07b18a5a8ea75f16f7e98ea897c7e7f47a0441c64bdaef8445a2100e0bdd2a7de99786c0&amp;scene=21#wechat_redirect">索引外置</a>》的设计方案</p></li><li><p>事务影响性能，强一致性要求才使用事务</p></li><li><p>不用外键，由应用程序来保证完整性</p></li><li><p>不命中索引，InnoDB也不能用行锁</p><p>innoDB 是非常适合互联网业务的存储引擎，其多版本并发控制，快照读机制，能够通过读取回滚段中数据的历史版本，在事物读取记录的时候不用加锁，以支持超高的并发。MyISAM 相对简单所以最好在效率上要优于InnoDB。如果系统读多，写少，对原子性要求低的情况下，MyISAM 是最好的选着。且MyISAM 恢复速度快。可直接备份覆盖恢复。如果系统读少，写多的时候，尤其是并发写入高的时候，innoDB就是首选了。</p><p>两种类型都有自己的优点，选着那个完全要看自己的实际选着。</p></li></ul><h2 id="InnoDB-四种事务隔离级别"><a href="#InnoDB-四种事务隔离级别" class="headerlink" title="InnoDB 四种事务隔离级别"></a>InnoDB 四种事务隔离级别</h2><p><strong>InnoDB默认是可重复读的（REPEATABLE READ）</strong></p><p>修改全局默认的事务级别，在my.inf文件的[mysqld]节里类似如下设置该选项（不推荐）</p><pre class=" language-java"><code class="language-java">transaction<span class="token operator">-</span>isolation <span class="token operator">=</span> <span class="token punctuation">{</span>READ<span class="token operator">-</span>UNCOMMITTED <span class="token operator">|</span> READ<span class="token operator">-</span>COMMITTED <span class="token operator">|</span> REPEATABLE<span class="token operator">-</span>READ <span class="token operator">|</span> SERIALIZABLE<span class="token punctuation">}</span></code></pre><p> <strong>四种隔离级别说明</strong></p><table><thead><tr><th align="left">隔离级别</th><th align="left">脏读（Dirty Read）</th><th align="left">不可重复读（NonRepeatable Read）</th><th align="left">幻读（Phantom Read）</th></tr></thead><tbody><tr><td align="left">未提交读（Read uncommitted）</td><td align="left">可能</td><td align="left">可能</td><td align="left">可能</td></tr><tr><td align="left">已提交读（Read committed）</td><td align="left">不可能</td><td align="left">可能</td><td align="left">可能</td></tr><tr><td align="left">可重复读（Repeatable read）</td><td align="left">不可能</td><td align="left">不可能</td><td align="left">可能</td></tr><tr><td align="left">可串行化（SERIALIZABLE）</td><td align="left">不可能</td><td align="left">不可能</td><td align="left">不可能</td></tr></tbody></table><p>脏读 :一个事务读取到另一事务未提交的更新数据</p><p>不可重复读 : 在同一事务中,多次读取同一数据返回的结果有所不同</p><p>幻读 :一个事务读到另一个事务已提交的insert数据</p><p><strong>1.脏读</strong></p><p>A事务读取B事务尚未提交的更改数据，并在这个数据的基础上进行操作，这时候如果事务B回滚，那么A事务读到的数据是不被承认的。例如常见的取款事务和转账事务：<br><img src="https://img-blog.csdn.net/20170731153307604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3RhcmxoMzU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>2.不可重复读</strong></p><p>不可重复读是指A事务读取了B事务已经提交的更改数据。假如A在取款事务的过程中，B往该账户转账100，A两次读取的余额发生不一致。</p><p><strong>3.幻读</strong></p><p>A事务读取B事务提交的新增数据,会引发幻读问题。幻读一般发生在计算统计数据的事务中，例如银行系统在同一个事务中两次统计存款账户的总金额，在两次统计中，刚好新增了一个存款账户，存入了100，这时候两次统计的总金额不一致。<br><img src="https://img-blog.csdn.net/20170731153407212?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3RhcmxoMzU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>注意：不可重复读和幻读的区别是：前者是指读到了已经提交的事务的更改数据（修改或删除），后者是指读到了其他已经提交事务的新增数据。对于这两种问题解决采用不同的办法，防止读到更改数据，只需对操作的数据添加行级锁，防止操作中的数据发生变化；二防止读到新增数据，往往需要添加表级锁，将整张表锁定，防止新增数据（oracle采用多版本数据的方式实现）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限系统</title>
      <link href="2020/09/19/quan-xian-xi-tong/"/>
      <url>2020/09/19/quan-xian-xi-tong/</url>
      
        <content type="html"><![CDATA[<h3 id="权限系统"><a href="#权限系统" class="headerlink" title="权限系统"></a>权限系统</h3><p><strong>ACL</strong> (基于用户的)</p><ol><li><p>ACL 权限系统 （三张表）（古老的权限体系）</p><ol><li>简单方便 只针对用户，（小公司）</li></ol></li></ol><pre class=" language-python"><code class="language-python">用户表：id ，用户名，<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>用户<span class="token operator">-</span>权限table：有用户管理的 就把用户id添加到 这个表里，权限表： 节点表  <span class="token operator">-</span><span class="token operator">-</span> 用户管理，课程管理，标签管理</code></pre><ol start="2"><li>权限系统一开始不是针对角色的，只针对用户的，（大公司不用ACL）</li></ol><h3 id="RBAC-权限系统（角色）"><a href="#RBAC-权限系统（角色）" class="headerlink" title="RBAC  权限系统（角色）"></a><strong>RBAC</strong>  权限系统（角色）</h3><p>​    当人数非常大的，比较庞杂，RBAC就产生出来了</p><pre><code>+ 不针对某个用户授权，针对角色+ 给用户分配某个角色，针对角色授权+ 可以把role_id 放到 jwt里 就不用四表联查了，</code></pre><pre class=" language-python"><code class="language-python">用户表：role_id<span class="token punctuation">(</span>角色id<span class="token punctuation">)</span>用户角色：（一对多不用创建，多对多需要）角色表： 超级管理员，课程管理员，用户管理员角色<span class="token operator">-</span>权限权限表： 用户管理页面 课程管理员，标签管理员</code></pre><h3 id="ABac-权限系统-基于属性"><a href="#ABac-权限系统-基于属性" class="headerlink" title="ABac 权限系统 (基于属性)"></a><strong>ABac</strong> 权限系统 (基于属性)</h3><pre><code> 更加细致</code></pre><p>​    一个工牌 只能上午 10 到 晚上6 能在公司，添加一个属性即可，</p><pre><code>用户表：属性：班主任 10点 教室（任务，时间，地点）属性-权限权限表</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 权限 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="2020/09/18/mysql-yin-qing-todo/"/>
      <url>2020/09/18/mysql-yin-qing-todo/</url>
      
        <content type="html"><![CDATA[<h3 id="mysql-引擎"><a href="#mysql-引擎" class="headerlink" title="mysql 引擎"></a>mysql 引擎</h3><p>​        InnoDB 是事物型数据库首选引擎，支持事物安全表（ACID）,支持锁和外键，innoDB是默认的mysql引擎，</p><ul><li><p>innoDB 给mysql提供了具有提交，回滚和崩溃恢复能力的事物安全存储引擎。</p></li><li><p>innoDB 中存在表锁和行锁，不过行锁是在命中索引的情况下才会起作用。</p></li><li><p>innoDB 支持事物，且支持四种隔离级别（读未提交读，读已提交读，可重复读，串行读），默认的为可重复读。</p></li><li><p>如果要提供提交，回滚，崩溃恢复能力的事物安全（ACID）能力，并要求实现并发控制，innoDB是一个好的选择。</p></li></ul><p>​    <strong>MyISAM存储引擎</strong></p><ul><li>他是在 Web,数据存储和其他应用环境下最常用的存储引擎之一，myisam拥有较高的插入，查询速度。</li><li>myisam 只支持表锁，且不支持事物，在读取数据方面的性能很高。</li><li>如果数据要用来插入和查询记录，则myisam引擎能提供较高的处理效率。</li></ul><p><strong>存储结构</strong></p><p>​    innoDB 和 MYISAM 都是用B+Tree 来存储数据的</p><p><strong>使用哪一种引擎需要灵活选择，一个数据库中多个表可以使用不同引擎可以满足各种性能和实际需求，使用何使的存储引擎，将会提高整个数据库的性能</strong></p><p>​    </p><h3 id="Mysql-的索引"><a href="#Mysql-的索引" class="headerlink" title="Mysql 的索引"></a>Mysql 的索引</h3><p>​      索引是一种用来实现MYSQL 高效获取数据的数据结构。</p><ul><li>我们通常所说的在某个字段上建立索引，意思就是让MYSQL 对该字段一索引这种数据结构来存储，然后查找的时候就有对应的查找算法。</li><li>建索引的根本目的就是为了查找的优化，特别是当数据很庞大的时候，一般的查找算法有顺序结构，折半查找，快速查找等。</li><li>但是每种查找算法都是只能应用于特定的数据结构之上，列入顺序查找依赖于顺序结构，折半查找通过二叉查找树或红黑树实现二分搜索，因此在数据之外，数据库系统还在维护这满足特定查找算法的数据结构。</li><li>这些数据结构以某种方式引用数据，这样就可以在数据结构上实现高级查找算法，这种数据结构就是索引。</li></ul><h3 id="mysql-锁"><a href="#mysql-锁" class="headerlink" title="mysql 锁"></a>mysql 锁</h3><p>​            表级锁：</p><p>​                    </p><pre><code>Todo</code></pre><p>​            行级锁：</p><p>​                排他锁，又称写锁，不能与其他锁并存，如果一个事物获取了该数据的排他锁，不能在加其他锁了，可读可写，不能在加其他锁，但你可以使用简单的查询，</p><p>​                共享锁，也称为读锁，多个事物对同一事物共享一把锁，，只能读不能修改，普通查询不会有任何锁机制</p><p>悲观锁：</p><p>​    悲观锁顾名思义，就是很悲观，每次去拿数据认为数据会被更改，每次拿数据时会上锁，当其他人来拿数据时就会block ，直至拿到锁，传统数据库中的行锁，表锁，读锁，写锁，操作之前会上锁。冲突多时，用悲观锁。</p><p>​    乐观锁：</p><p>​    悲观锁顾名思义，就是很乐观，每次去拿数据认为数据不会被更改，不会上锁，在更新时会判断一下是否有人修改数据，适合多读，提高吞吐量，写比较少，省区锁的开销</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="2020/09/18/gong-han-mo-shi/"/>
      <url>2020/09/18/gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WeiBo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>slef<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'新浪三方登录'</span><span class="token keyword">class</span> <span class="token class-name">DingDing</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>slef<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'钉钉三方登录'</span><span class="token comment" spellcheck="true"># 用那个调那个</span>weibo <span class="token operator">=</span> WeiBo<span class="token punctuation">(</span><span class="token punctuation">)</span>dingding <span class="token operator">=</span> DingDing<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>weibo<span class="token punctuation">)</span></code></pre><ol><li>现在只有两个，明天添加微信，后天做一个QQ等等，我们不知道社交账号什么时候完结，我们就得做无数个类，会被累死，一个两个没问题，N 多个时，就不知实列化那个了，这种方式也可以做，我一千个类判断一下类名就行了，实际上可以，但不好维护，如果是一个调用方，认证部门做三方，如果是支付部门的，他要来调用类，一看这么多类，他就不知道调用那个，就得自己去找，很麻烦。</li><li>这时候就要用设计模式得工厂模式，对对象的创建过程抽象化，让用户指定自己想要得对象，而不必关心对象的实列化过程，换句话说，就是把实列化过程隐藏起来，用户只需要通过固定的接口来调用这个类里边的具体方法，就ok了，不需要考虑调用那个类，怎么实列化对象他就不关心了，跟他没关系了，这样就可以解耦了，降低耦合度，类自己写的，没关系，很好调用，如果是其他人，他就得先熟悉你的代码，这个过程省略，就叫工厂模式，主要降低维护得复杂性，</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 工厂模式</span><span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span><span class="token punctuation">:</span>    @staticmethod <span class="token comment" spellcheck="true"># 不需要实列化，直接调用</span>    <span class="token keyword">def</span> <span class="token function">ThirdLogin</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 不写self 不是类方法</span>        <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'weibo'</span><span class="token punctuation">:</span>            rerurn WieBo<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">'DingDing'</span><span class="token punctuation">:</span> dinding <span class="token operator">=</span> SimpleFactory<span class="token punctuation">.</span>ThirdLogin<span class="token punctuation">(</span><span class="token string">'dingding'</span><span class="token punctuation">)</span></code></pre><ol><li>不需要实列化对象，使用静态方法省略。</li><li>我也不考虑他是那个类里是“顶顶”，我只需要传参，里边的逻辑不用管</li><li>只要给我一个参数，你不用管，我也不用管，我们各自为战，实现了解耦</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Haysatck</title>
      <link href="2020/09/15/haysatck/"/>
      <url>2020/09/15/haysatck/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索引擎原理，Haystack-（倒排索引）原理"><a href="#搜索引擎原理，Haystack-（倒排索引）原理" class="headerlink" title="搜索引擎原理，Haystack （倒排索引）原理"></a>搜索引擎原理，Haystack （倒排索引）原理</h2><ul><li><p>（搜索过程）haystack 还提供一个 包，把分词扔给搜索引擎，告诉我id，haystack 根据id 把对象的集合拿出来</p></li><li><p>Haystack 就是把结构化数据 整成 非结构化数据  喂给收缩引擎。</p></li><li><p>全文检索收索（倒排索引，就是为了提供搜索）</p></li><li><p>中文分词（jieba）</p></li></ul><p>mysql自带模糊查找，效率极低</p><p><img src="C:\Users\YJJ\AppData\Roaming\Typora\typora-user-images\1600158855190.png" alt="1600158855190"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql主从</title>
      <link href="2020/09/15/mysql-zhu-cong-fu-zhi/"/>
      <url>2020/09/15/mysql-zhu-cong-fu-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql-主从复制"><a href="#mysql-主从复制" class="headerlink" title="mysql 主从复制"></a>mysql 主从复制</h2><p>主从复制（也称 AB 复制）允许将来自一个MySQL数据库服务器（主服务器）的数据复制到一个或多个MySQL数据库服务器（从服务器）。</p><blockquote><p>复制是异步的 从站不需要永久连接以接收来自主站的更新。</p></blockquote><p>根据配置，您可以复制数据库中的所有数据库，所选数据库甚至选定的表。</p><p>MySQL中复制的优点包括：</p><ul><li>横向扩展解决方案 - 在多个从站之间分配负载以提高性能。在此环境中，所有写入和更新都必须在主服务器上进行。但是，读取可以在一个或多个从设备上进行。该模型可以提高写入性能（因为主设备专用于更新），同时显着提高了越来越多的从设备的读取速度。</li><li>数据安全性 - 因为数据被复制到从站，并且从站可以暂停复制过程，所以可以在从站上运行备份服务而不会破坏相应的主数据。</li><li>分析 - 可以在主服务器上创建实时数据，而信息分析可以在从服务器上进行，而不会影响主服务器的性能。</li><li>远程数据分发 - 您可以使用复制为远程站点创建数据的本地副本，而无需永久访问主服务器。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/11414906-1e1d8aaa7a86af96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/799/format/webp" alt="img"></p><p><strong>Master 启动</strong>（主机）</p><p>Datechanges : 数据改变</p><ul><li>数据改变会产生一个blog日志（二进制日志）（master 必须生成一个）</li></ul><p><strong>Slave</strong> （从机）</p><ul><li><p>开启一个 i/o thread（i/o线程）不停得读blog日志</p></li><li><p>读回来，并写入到自己得 Replaylog 里   Replaylog 等于 主机里得  Blog</p></li><li><p>从机通过 SQLthread 读取 Replaylog 日志得操作 实现同步</p></li><li><p>如果都是 yes 的 表示链接成功</p><pre class=" language-python"><code class="language-python">         Slave_IO_Running<span class="token punctuation">:</span> Yes        Slave_SQL_Running<span class="token punctuation">:</span> Yes</code></pre></li></ul><blockquote><p>前提是作为主服务器角色的数据库服务器必须开启二进制日志</p></blockquote><ol><li>主服务器上面的任何修改都会通过自己的 I/O tread(I/O 线程)保存在二进制日志 <code>Binary log</code> 里面。</li><li>从服务器上面也启动一个 I/O thread，通过配置好的用户名和密码, 连接到主服务器上面请求读取二进制日志，然后把读取到的二进制日志写到本地的一个<code>Realy log</code>（中继日志）里面。</li><li>从服务器上面同时开启一个 SQL thread 定时检查 <code>Realy log</code>(这个文件也是二进制的)，如果发现有更新立即把更新的内容在本机的数据库上面执行一遍。</li></ol><p>mysql主从:</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 新建2个目录, 存放master和slave的配置和数据,</span>cd <span class="token operator">~</span>   <span class="token comment" spellcheck="true"># ~ 代表家目录   /home/你的用户名/</span>mkdir mysql_mastermkdir mysql_slavecd mysql_mastermkdir datacp <span class="token operator">-</span>r <span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d <span class="token punctuation">.</span><span class="token operator">/</span>cd <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>mysql_slavemkdir datacp <span class="token operator">-</span>r <span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d <span class="token punctuation">.</span><span class="token operator">/</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 主机配置和从机配置</span><span class="token comment" spellcheck="true"># 主机配置  /home/python/mysql_master/mysql.conf.d/mysqld.cnf</span><span class="token comment" spellcheck="true"># 端口</span>port <span class="token operator">=</span> <span class="token number">3307</span><span class="token comment" spellcheck="true"># 开启日志</span>general_log_file <span class="token operator">=</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token punctuation">.</span>loggeneral_log <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 主机唯一编号</span>server<span class="token operator">-</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># binlog日志文件</span>log_bin <span class="token operator">=</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token operator">-</span>bin<span class="token punctuation">.</span>log<span class="token comment" spellcheck="true"># 从机配置  /home/python/mysql_slave/mysql.conf.d/mysqld.cnf</span>port <span class="token operator">=</span> <span class="token number">3308</span>general_log <span class="token operator">=</span> <span class="token number">0</span>  server<span class="token operator">-</span>id <span class="token operator">=</span> <span class="token number">2</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 加载mysql的docker镜像到 docker中</span>docker image load <span class="token operator">-</span>i mysql_docker_5722<span class="token punctuation">.</span>tar<span class="token comment" spellcheck="true"># 启动master/slave</span>sudo docker run  <span class="token operator">-</span>d <span class="token operator">-</span><span class="token operator">-</span>name mysql<span class="token operator">-</span>master <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>mysql <span class="token operator">-</span><span class="token operator">-</span>network<span class="token operator">=</span>host <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>python<span class="token operator">/</span>mysql_master<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>python<span class="token operator">/</span>mysql_master<span class="token operator">/</span>mysql<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d mysql<span class="token punctuation">:</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">22</span>sudo docker run  <span class="token operator">-</span>d <span class="token operator">-</span><span class="token operator">-</span>name mysql<span class="token operator">-</span>slave <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>mysql <span class="token operator">-</span><span class="token operator">-</span>network<span class="token operator">=</span>host <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>python<span class="token operator">/</span>mysql_slave<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>python<span class="token operator">/</span>mysql_slave<span class="token operator">/</span>mysql<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d mysql<span class="token punctuation">:</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">22</span><span class="token comment" spellcheck="true"># 测试master/slave  (密码是mysql)</span>mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>pmysql <span class="token operator">-</span>h <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span><span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">3307</span>mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>pmysql <span class="token operator">-</span>h <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span><span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">3308</span><span class="token comment" spellcheck="true"># 导出导入数据</span><span class="token comment" spellcheck="true"># 从主机导出</span>mysqldump <span class="token operator">-</span>uroot <span class="token operator">-</span>pmysql <span class="token operator">-</span>h10<span class="token number">.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span>P3307 <span class="token operator">-</span><span class="token operator">-</span>all<span class="token operator">-</span>databases <span class="token operator">-</span><span class="token operator">-</span>lock<span class="token operator">-</span>all<span class="token operator">-</span>tables <span class="token operator">></span> <span class="token operator">~</span><span class="token operator">/</span>master_db<span class="token punctuation">.</span>sql<span class="token comment" spellcheck="true"># 导入从机</span>mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>pmysql <span class="token operator">-</span>h10<span class="token number">.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span>P3308 <span class="token operator">&lt;</span> <span class="token operator">~</span><span class="token operator">/</span>master_db<span class="token punctuation">.</span>sql</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 配置master</span><span class="token comment" spellcheck="true"># 登录到主机</span>mysql –uroot –p <span class="token operator">-</span>h <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span>P <span class="token number">3307</span><span class="token comment" spellcheck="true"># 创建从机账号</span>GRANT REPLICATION SLAVE ON <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> TO <span class="token string">'slave'</span>@<span class="token string">'%'</span> identified by <span class="token string">'slave'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 刷新权限</span>FLUSH PRIVILEGES<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看二进制日志信息, 记录 文件名 和 偏移量, 后面会用到</span>SHOW MASTER STATUS<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> File             <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> mysql<span class="token operator">-</span>bin<span class="token number">.000001</span> <span class="token operator">|</span>      <span class="token number">154</span> <span class="token operator">|</span>              <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token comment" spellcheck="true"># 配置slave</span><span class="token comment" spellcheck="true"># 登录到从机</span>$ mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>pmysql <span class="token operator">-</span>h10<span class="token number">.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span>P3308<span class="token comment" spellcheck="true"># 从机连接到主机</span>$ change master to master_host<span class="token operator">=</span><span class="token string">'10.211.55.15'</span><span class="token punctuation">,</span> master_port<span class="token operator">=</span><span class="token number">3307</span><span class="token punctuation">,</span> master_user<span class="token operator">=</span><span class="token string">'slave'</span><span class="token punctuation">,</span> master_password<span class="token operator">=</span><span class="token string">'slave'</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span><span class="token punctuation">,</span> master_log_pos<span class="token operator">=</span><span class="token number">154</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 开启从机服务</span>$ start slave<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 展示从机服务状态</span>$ show slave status \Gmysql<span class="token operator">></span> show slave status \G<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">.</span> row <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>               Slave_IO_State<span class="token punctuation">:</span> Waiting <span class="token keyword">for</span> master to send event                  Master_Host<span class="token punctuation">:</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span>                  Master_User<span class="token punctuation">:</span> slave                  Master_Port<span class="token punctuation">:</span> <span class="token number">3307</span>                Connect_Retry<span class="token punctuation">:</span> <span class="token number">60</span>              Master_Log_File<span class="token punctuation">:</span> mysql<span class="token operator">-</span>bin<span class="token number">.000003</span>          Read_Master_Log_Pos<span class="token punctuation">:</span> <span class="token number">722</span>               Relay_Log_File<span class="token punctuation">:</span> ubuntu<span class="token operator">-</span>relay<span class="token operator">-</span>bin<span class="token number">.000002</span>                Relay_Log_Pos<span class="token punctuation">:</span> <span class="token number">320</span>        Relay_Master_Log_File<span class="token punctuation">:</span> mysql<span class="token operator">-</span>bin<span class="token number">.000003</span>             Slave_IO_Running<span class="token punctuation">:</span> Yes            Slave_SQL_Running<span class="token punctuation">:</span> Yes</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 配置django</span>DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'syl'</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'10.211.55.15'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'3307'</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'slave'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'syl'</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'10.211.55.15'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'3308'</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 数据库路由配置</span>DATABASE_ROUTERS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'utils.db_router.MasterSlaveDBRouter'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 编写路由文件</span><span class="token comment" spellcheck="true"># utils/db_router.py</span><span class="token keyword">class</span> <span class="token class-name">MasterSlaveDBRouter</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""数据库读写路由"""</span>    <span class="token keyword">def</span> <span class="token function">db_for_read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model<span class="token punctuation">,</span> <span class="token operator">**</span>hints<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""读"""</span>        <span class="token keyword">return</span> <span class="token string">"slave"</span>    <span class="token keyword">def</span> <span class="token function">db_for_write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model<span class="token punctuation">,</span> <span class="token operator">**</span>hints<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""写"""</span>        <span class="token keyword">return</span> <span class="token string">"default"</span>    <span class="token keyword">def</span> <span class="token function">allow_relation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token operator">**</span>hints<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""是否运行关联操作"""</span>        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS</title>
      <link href="2020/09/15/fastdfs/"/>
      <url>2020/09/15/fastdfs/</url>
      
        <content type="html"><![CDATA[<p>FastDFS 介绍</p><ul><li><h5 id="fastDFS-是以C语言开发的一项开源轻量级分布式文件系统，"><a href="#fastDFS-是以C语言开发的一项开源轻量级分布式文件系统，" class="headerlink" title="fastDFS 是以C语言开发的一项开源轻量级分布式文件系统，"></a>fastDFS 是以C语言开发的一项开源轻量级分布式文件系统，</h5></li><li><h5 id="他对文件进行管理，主要功能有：文件存储，文件同步，文件访问（文件上传-下载）-特别适合以文件为载体的在线服务，如图片网站，视频网站等"><a href="#他对文件进行管理，主要功能有：文件存储，文件同步，文件访问（文件上传-下载）-特别适合以文件为载体的在线服务，如图片网站，视频网站等" class="headerlink" title="他对文件进行管理，主要功能有：文件存储，文件同步，文件访问（文件上传/下载）,特别适合以文件为载体的在线服务，如图片网站，视频网站等"></a>他对文件进行管理，主要功能有：文件存储，文件同步，文件访问（文件上传/下载）,特别适合以文件为载体的在线服务，如图片网站，视频网站等</h5></li><li><p>为互联网量身定制，充分考虑了冗余备份，负载均衡，线性扩展等机制，并注重高可用，高性能等指标，</p></li><li><p>可以帮助我们搭建一套高性能的文件服务器集群，并提供文件上传，下载等服务。</p></li></ul><p><img src="http://static.oschina.net/uploads/img/201204/20230218_pNXn.jpg" alt="img"></p><h2 id="FastDFS-分为"><a href="#FastDFS-分为" class="headerlink" title="FastDFS 分为:"></a>FastDFS 分为:</h2><p>​    <strong>Client ：</strong></p><p>​        客户端：可以是浏览器，docker容器，django 服务</p><p>​    <strong>Tracker 群</strong></p><p>​            +  监控管理 Storage群</p><p>​        <strong>Storage 群</strong></p><pre><code>          - 真正存储文件的地方                - Volume 称为一卷或一组，主从同步差不多，不是主从的概念，都可以写读，但是一个写，会同步给其他节点，</code></pre><p><strong>单个卷的作用</strong>：从读写和容量来考虑，读取性能变高没，写入的性能变高没，容量变大没</p><ul><li>一个卷  写入并没有变高，写一个文件，另一个机器必须的在写一次</li><li>读的性能会变高，可以一次读取十个</li><li>容量没有变大，以为会重复文件，文件都一样</li></ul><p><strong>Storage 集群</strong></p><ul><li>写入卷一和卷二，文件被分片，就会加强写入和容量，读取也被扩展，</li><li>动态扩展，高可用（卷一机器坏了，还有其他机器），高性能，可扩展</li></ul><h2 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h2><ul><li>（写入那个，读那个）没有核心节点， 直接跟卷里的某个机器读写，（先确定机器）</li><li>首先先确定跟那个机器读写，必须跟Traker 群（交互）确定，</li><li>​    客户要读那个文件，Tracker（与集群有交互，知道集群在干嘛） 就告诉你取第二个机器去读，</li><li>Tracker 看谁闲，告诉你你就找谁</li></ul><p>fastdfs集群:</p><p>​     注意: 一定要删除  /var/fdfs/ 目录下的文件 (此目录下的文件包含旧的配置, 会造成服务无法访问)</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 加载docker镜像</span>sudo docker load <span class="token operator">-</span>i fastdfs_docker<span class="token punctuation">.</span>tar<span class="token comment" spellcheck="true"># 启动tracker</span>sudo docker run <span class="token operator">-</span>dit <span class="token operator">-</span><span class="token operator">-</span>name tracker <span class="token operator">-</span><span class="token operator">-</span>network<span class="token operator">=</span>host <span class="token operator">-</span>v <span class="token operator">/</span>var<span class="token operator">/</span>fdfs<span class="token operator">/</span>tracker<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>fdfs delron<span class="token operator">/</span>fastdfs tracker<span class="token comment" spellcheck="true"># 启动storage</span>sudo docker run <span class="token operator">-</span>dti <span class="token operator">-</span><span class="token operator">-</span>name storage <span class="token operator">-</span><span class="token operator">-</span>network<span class="token operator">=</span>host <span class="token operator">-</span>e TRACKER_SERVER<span class="token operator">=</span><span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">22122</span> <span class="token operator">-</span>v <span class="token operator">/</span>var<span class="token operator">/</span>fdfs<span class="token operator">/</span>storage<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>fdfs delron<span class="token operator">/</span>fastdfs storage<span class="token comment" spellcheck="true"># http://10.211.55.15:8888/  这是 storage的访问地址</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 安装依赖</span>pip install py3Fdfs<span class="token operator">==</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">0</span>pip install mutagen<span class="token operator">==</span><span class="token number">1.45</span><span class="token punctuation">.</span><span class="token number">1</span>pip install requests<span class="token operator">==</span><span class="token number">2.22</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token comment" spellcheck="true"># 增加目录</span><span class="token comment" spellcheck="true"># /utils/fdfs/</span><span class="token comment" spellcheck="true"># 增加配置文件 </span><span class="token comment" spellcheck="true"># /utils/fdfs/client.conf</span>connect_timeout<span class="token operator">=</span><span class="token number">30</span>network_timeout<span class="token operator">=</span><span class="token number">120</span><span class="token comment" spellcheck="true"># the base path to store log files</span>base_path<span class="token operator">=</span><span class="token operator">~</span><span class="token operator">/</span>Desktop<span class="token comment" spellcheck="true"># ip:port</span>tracker_server<span class="token operator">=</span><span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">22122</span>log_level<span class="token operator">=</span>infouse_connection_pool <span class="token operator">=</span> falseconnection_pool_max_idle_time <span class="token operator">=</span> <span class="token number">3600</span>load_fdfs_parameters_from_tracker<span class="token operator">=</span>falseuse_storage_id <span class="token operator">=</span> falsestorage_ids_filename <span class="token operator">=</span> storage_ids<span class="token punctuation">.</span>confhttp<span class="token punctuation">.</span>tracker_server_port<span class="token operator">=</span><span class="token number">80</span><span class="token comment" spellcheck="true"># 测试fastdfs客户端</span><span class="token comment" spellcheck="true"># /utils/fdfs/test.py</span><span class="token keyword">from</span> fdfs_client<span class="token punctuation">.</span>client <span class="token keyword">import</span> get_tracker_conf<span class="token punctuation">,</span> Fdfs_client<span class="token keyword">from</span> syl<span class="token punctuation">.</span>settings <span class="token keyword">import</span> FDFS_CONF_PATH<span class="token comment" spellcheck="true"># 1. 获取配置文件</span>conf <span class="token operator">=</span> get_tracker_conf<span class="token punctuation">(</span>conf_path<span class="token operator">=</span>FDFS_CONF_PATH<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 创建FastDFS客户端实例</span>client <span class="token operator">=</span> Fdfs_client<span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 调用FastDFS客户端上传文件方法,</span>ret <span class="token operator">=</span> client<span class="token punctuation">.</span>upload_by_filename<span class="token punctuation">(</span><span class="token string">'/Users/mac/Pictures/0.jpg'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 自定义存储后端</span><span class="token comment" spellcheck="true"># utils/fdfs/my_storage.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>files<span class="token punctuation">.</span>storage <span class="token keyword">import</span> Storage<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> fdfs_client<span class="token punctuation">.</span>client <span class="token keyword">import</span> Fdfs_client<span class="token punctuation">,</span> get_tracker_conf<span class="token keyword">class</span> <span class="token class-name">MyStorage</span><span class="token punctuation">(</span>Storage<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>base_url <span class="token operator">=</span> settings<span class="token punctuation">.</span>FDFS_BASE_URL    <span class="token keyword">def</span> <span class="token function">_open</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">_save</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 返回 真实存储的 文件名</span>        <span class="token comment" spellcheck="true"># 1. 读取配置文件</span>        conf <span class="token operator">=</span> get_tracker_conf<span class="token punctuation">(</span>conf_path<span class="token operator">=</span>settings<span class="token punctuation">.</span>FDFS_CONF_PATH<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 2. 创建FastDFS客户端实例</span>        client <span class="token operator">=</span> Fdfs_client<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3. 调用FastDFS客户端上传文件方法</span>        ret <span class="token operator">=</span> client<span class="token punctuation">.</span>upload_by_buffer<span class="token punctuation">(</span>content<span class="token punctuation">.</span>file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret<span class="token punctuation">[</span><span class="token string">'Remote file_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>base_url <span class="token operator">+</span> name    <span class="token keyword">def</span> <span class="token function">exists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 配置 fastdfs</span><span class="token comment" spellcheck="true"># fasfdfs 服务器地址</span>FDFS_BASE_URL <span class="token operator">=</span> <span class="token string">'http://10.211.55.15:8888/'</span>FDFS_CONF_PATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'utils/fdfs/client.conf'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改系统默认的文件管理类</span>DEFAULT_FILE_STORAGE <span class="token operator">=</span> <span class="token string">'utils.fdfs.my_storage.MyStorage'</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器缓存一个函数的结果</title>
      <link href="2020/09/14/zhuang-shi-qi-shi-xian-yi-ge-huan-cun/"/>
      <url>2020/09/14/zhuang-shi-qi-shi-xian-yi-ge-huan-cun/</url>
      
        <content type="html"><![CDATA[<h3 id="实现一个简单的装饰器-用来对某个函数的结果进行缓存"><a href="#实现一个简单的装饰器-用来对某个函数的结果进行缓存" class="headerlink" title="实现一个简单的装饰器,用来对某个函数的结果进行缓存"></a>实现一个简单的装饰器,用来对某个函数的结果进行缓存</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> picklecache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">is_obsolete</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 判断缓存是否过期，返回True则过期</span>    d <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> entry<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> d <span class="token operator">></span> duration<span class="token keyword">def</span> <span class="token function">compute_key</span><span class="token punctuation">(</span>function<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将传入的参数序列化</span>    key <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">memoize</span><span class="token punctuation">(</span>duration<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 装饰器中缓存时间默认为10秒</span>    <span class="token keyword">def</span> <span class="token function">_memorize</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第二层传函数</span>        <span class="token keyword">def</span> <span class="token function">__memorize</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第三层传入非固定参数</span>            key <span class="token operator">=</span> compute_key<span class="token punctuation">(</span>function<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span>            <span class="token keyword">if</span> key <span class="token keyword">in</span> cache <span class="token operator">and</span> <span class="token operator">not</span> is_obsolete<span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'we got a winner'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'  '</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 如果缓存中有，就直接返回缓存过的结果</span>            result <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'value'</span><span class="token punctuation">:</span> result<span class="token punctuation">,</span> <span class="token string">'time'</span><span class="token punctuation">:</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span>            <span class="token keyword">return</span> result        <span class="token keyword">return</span> __memorize    <span class="token keyword">return</span> _memorize@memoize<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">complex</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    a<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入a: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入b: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>complex<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/09/14/django-flask/"/>
      <url>2020/09/14/django-flask/</url>
      
        <content type="html"><![CDATA[<h2 id="Django-amp-Flask"><a href="#Django-amp-Flask" class="headerlink" title="Django&amp;Flask"></a>Django&amp;Flask</h2><p><strong>Django</strong>走的是大而全的方向，开发效率高。它的MTV框架，自带ORM，admin后台管理，自带的sqlite数据库和开发测试用的服务器，给开发者提高了开发效率。重量级的web框架，功能齐全，提供一站式的解决思路，能让开发者不用在选择上花费大量的时间。<br>自带ORM和模板引擎，支持jinja等非官方模板引擎。<br>自带ORM使Django和关系型数据库耦合度高，如果要使用非关系型数据库，需要使用第三方库。<br>自带数据库管理app。<br>成熟稳定，开发效率高，相对于Flask，Django的整体封闭性比较好，适合做企业级网站的开发。python web框架的先驱，第三方库丰富。<br><strong>Flask</strong>是轻量级的框架，自由灵活，可扩展性，核心基于Werkzeug WSGI工具和jinja2模板引擎<br>适合做小网站以及web服务的API，开发大型网站无压力，但是架构需要自己设计。<br>与关系型数据库的结合不弱于Django，而与非关系型数据库的结合远远优于Django。<br><strong>WSGI</strong>： web服务器网关接口，是一套协议。用于接收用户请求并将请求进行初次封装，然后将请求交给web框架。<br>实现wsgi协议的模块：wsgiref本质上就是编写——socket服务端，用于接受用户请求（django）<br>werkzeug,本质上就是编写一个sock服务端，用于接收用户请求（django）<br><strong>uwsgi</strong>：与WSGI一样是一种通信协议，它是uWSGI服务器的独占协议，用于定义传输信息的类型。<br><strong>uWSGI</strong>：是一个web服务器，实现了WSGI的协议，uWSGI协议，http协议。<br>CORS和CSRF的区别？<br><strong>CORS</strong>是一个W3C标准，全称是“跨域资源共享”（Cross-origin resoure sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了Ajax只能同源使用的限制。<br><strong>CSRF</strong>主流防御方式是在后端生产表单的时候生成一串随机token，内置到表单里成为一个字段，同时，将此串token置入session中。每次表单提交到后端时都会检查这两个值是否一致，以此来判断此次表单提交是否可信，提交过一次之后，如果这个页面没有生成CSRF token，那么token将会被清空。如果有新的需求，那么token会被更新。攻击者可以伪造POST表单提交，但是他没有后端生成的内置于表单的token，session中没有token都无济于事。<br><strong>nginx</strong> 是一个开源的高性能的HTTP服务器和反向代理：<br>1.作为web服务器，它处理静态文件和索引文件效果非常高；<br>2.它的设计非常注重效率，最大支持5万个并发连接，但只占用很少的内存空间；<br>3.稳定性高，配置简洁；<br>4.强大的反向代理和负载均衡功能，平衡集群中各个服务器的负载压力应用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ能为你做些什么？</title>
      <link href="2020/09/13/rabbitmq-neng-zuo-shi-me/"/>
      <url>2020/09/13/rabbitmq-neng-zuo-shi-me/</url>
      
        <content type="html"><![CDATA[<h2 id="RabbitMQ能为你做些什么？"><a href="#RabbitMQ能为你做些什么？" class="headerlink" title="RabbitMQ能为你做些什么？"></a>RabbitMQ能为你做些什么？</h2><p><strong>消息队列中间件是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。目前使用较多的消息队列有ActiveMQ，RabbitMQ，ZeroMQ，Kafka，MetaMQ，RocketMQ。</strong></p><p><strong>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。</strong></p><p><strong>rabbitMQ是一款基于AMQP协议的消息中间件，它能够在应用之间提供可靠的消息传输。在易用性，扩展性，高可用性上表现优秀。使用消息中间件利于应用之间的解耦，生产者（客户端）无需知道消费者（服务端）的存在。而且两端可以使用不同的语言编写，大大提供了灵活性。</strong></p><p><strong>消息系统允许软件、应用相互连接和扩展．这些应用可以相互链接起来组成一个更大的应用，或者将用户设备和数据进行连接．消息系统通过将消息的发送和接收分离来实现应用程序的异步和解偶．</strong></p><p>或许你正在考虑进行数据投递，非阻塞操作或推送通知。或许你想要实现发布／订阅，异步处理，或者工作队列。所有这些都可以通过消息系统实现。</p><p>RabbitMQ是一个消息代理 - 一个消息系统的媒介。它可以为你的应用提供一个通用的消息发送和接收平台，并且保证消息在传输过程中的安全。</p><h2 id="技术亮点"><a href="#技术亮点" class="headerlink" title="技术亮点"></a>技术亮点</h2><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>RabbitMQ提供了多种技术可以让你在性能和可靠性之间进行权衡。这些技术包括持久性机制、投递确认、发布者证实和高可用性机制。</p><h3 id="灵活的路由"><a href="#灵活的路由" class="headerlink" title="灵活的路由"></a>灵活的路由</h3><p>消息在到达队列前是通过交换机进行路由的。RabbitMQ为典型的路由逻辑提供了多种内置交换机类型。如果你有更复杂的路由需求，可以将这些交换机组合起来使用，你甚至可以实现自己的交换机类型，并且当做RabbitMQ的插件来使用。</p><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>在相同局域网中的多个RabbitMQ服务器可以聚合在一起，作为一个独立的逻辑代理来使用。</p><h3 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h3><p>对于服务器来说，它比集群需要更多的松散和非可靠链接。为此RabbitMQ提供了联合模型。</p><h3 id="高可用的队列"><a href="#高可用的队列" class="headerlink" title="高可用的队列"></a>高可用的队列</h3><p>在同一个集群里，队列可以被镜像到多个机器中，以确保当其中某些硬件出现故障后，你的消息仍然安全。</p><h3 id="多协议"><a href="#多协议" class="headerlink" title="多协议"></a>多协议</h3><p>RabbitMQ 支持多种消息协议的消息传递。</p><h3 id="广泛的客户端"><a href="#广泛的客户端" class="headerlink" title="广泛的客户端"></a>广泛的客户端</h3><p>只要是你能想到的编程语言几乎都有与其相适配的RabbitMQ客户端。</p><h3 id="可视化管理工具"><a href="#可视化管理工具" class="headerlink" title="可视化管理工具"></a>可视化管理工具</h3><p>RabbitMQ附带了一个易于使用的可视化管理工具，它可以帮助你监控消息代理的每一个环节。</p><h3 id="追踪"><a href="#追踪" class="headerlink" title="追踪"></a>追踪</h3><p>如果你的消息系统有异常行为，RabbitMQ还提供了追踪的支持，让你能够发现问题所在。</p><h3 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h3><p>RabbitMQ附带了各种各样的插件来对自己进行扩展。你甚至也可以写自己的插件来使用。</p><h2 id="还有什么呢…"><a href="#还有什么呢…" class="headerlink" title="还有什么呢…"></a>还有什么呢…</h2><h3 id="商业支持"><a href="#商业支持" class="headerlink" title="商业支持"></a>商业支持</h3><p>可以提供商业支持，包括培训和咨询。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis集群</title>
      <link href="2020/09/12/redis-ji-qun/"/>
      <url>2020/09/12/redis-ji-qun/</url>
      
        <content type="html"><![CDATA[<h4 id="redis集群"><a href="#redis集群" class="headerlink" title="redis集群:"></a>redis集群:</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建集群, 启动6个redis实例, 集群至少要3个节点, 每个节点必须是主从结构</span><span class="token comment" spellcheck="true"># 配置如下:  复制6份, 修改端口号</span>port <span class="token number">7000</span>  <span class="token comment" spellcheck="true"># 端口</span>bind <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span>   <span class="token comment" spellcheck="true"># 这里换成自己的ip</span>daemonize yes  <span class="token comment" spellcheck="true"># 后台运行, 不占用终端</span>pidfile <span class="token number">7000.</span>pid  <span class="token comment" spellcheck="true"># pid保存文件名</span>cluster<span class="token operator">-</span>enabled yes  <span class="token comment" spellcheck="true"># 集群模式</span>cluster<span class="token operator">-</span>config<span class="token operator">-</span>file 7000_node<span class="token punctuation">.</span>conf  <span class="token comment" spellcheck="true"># 集群配置保存文件名</span>cluster<span class="token operator">-</span>node<span class="token operator">-</span>timeout <span class="token number">15000</span>  <span class="token comment" spellcheck="true"># 节点超时时间(毫秒)</span>appendonly yes  <span class="token comment" spellcheck="true"># 所有的写操作都追加到日志中</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 启动6个redis节点</span>redis<span class="token operator">-</span>server <span class="token number">7000.</span>confredis<span class="token operator">-</span>server <span class="token number">7001.</span>confredis<span class="token operator">-</span>server <span class="token number">7002.</span>confredis<span class="token operator">-</span>server <span class="token number">7003.</span>confredis<span class="token operator">-</span>server <span class="token number">7004.</span>confredis<span class="token operator">-</span>server <span class="token number">7005.</span>conf</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 复制 集群管理工具 到系统路径, 方便调用工具</span>sudo cp <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>doc<span class="token operator">/</span>redis<span class="token operator">-</span>tools<span class="token operator">/</span>examples<span class="token operator">/</span>redis<span class="token operator">-</span>trib<span class="token punctuation">.</span>rb <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span><span class="token comment" spellcheck="true"># 使用集群配置工具, 把6个节点配置成集群模式,  --replicas 1 表示每个主节点有一个从节点</span>redis<span class="token operator">-</span>trib<span class="token punctuation">.</span>rb create <span class="token operator">-</span><span class="token operator">-</span>replicas <span class="token number">1</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7000</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7001</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7002</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7003</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7004</span> <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span><span class="token punctuation">:</span><span class="token number">7005</span><span class="token comment" spellcheck="true"># 使用命令行工具测试集群</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>c <span class="token operator">-</span>h <span class="token number">10.211</span><span class="token punctuation">.</span><span class="token number">55.15</span> <span class="token operator">-</span>p <span class="token number">7000</span>   <span class="token comment" spellcheck="true"># -c 表示集群模式</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 安装依赖包</span>django<span class="token operator">-</span>cluster<span class="token operator">-</span>redis<span class="token operator">==</span> <span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">5</span>django<span class="token operator">-</span>redis<span class="token operator">==</span> <span class="token number">4.10</span><span class="token punctuation">.</span><span class="token number">0</span>redis<span class="token operator">==</span> <span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 注意这个版本</span>redis<span class="token operator">-</span>py<span class="token operator">-</span>cluster<span class="token operator">==</span> <span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">0</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 配置cache</span>CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django_redis.cache.RedisCache'</span><span class="token punctuation">,</span>        <span class="token string">'LOCATION'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"redis://10.211.55.15:7000"</span><span class="token punctuation">,</span>            <span class="token string">"redis://10.211.55.15:7001"</span><span class="token punctuation">,</span>            <span class="token string">"redis://10.211.55.15:7002"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'REDIS_CLIENT_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rediscluster.RedisCluster'</span><span class="token punctuation">,</span>            <span class="token string">'CONNECTION_POOL_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rediscluster.connection.ClusterConnectionPool'</span><span class="token punctuation">,</span>            <span class="token string">"CONNECTION_POOL_KWARGS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"decode_responses"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 测试django-redis 集群模式, 集群模式不支持切换库编号</span><span class="token keyword">from</span> django_redis <span class="token keyword">import</span> get_redis_connectionredis_client <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token punctuation">)</span>redis_client<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'祖安人'</span><span class="token punctuation">)</span>redis_client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相思啊！</title>
      <link href="2020/09/12/xiang-si/"/>
      <url>2020/09/12/xiang-si/</url>
      
        <content type="html"><![CDATA[<h3 id="相思"><a href="#相思" class="headerlink" title="相思"></a>相思</h3><p><a href="https://hanyu.baidu.com/s?wd=%E7%8E%8B%E7%BB%B4">                        【作者】王维 </a>【朝代】唐</p><p>红豆生南国，春来发几枝。</p><p>愿君多采撷，此物最相思。</p><p>标签:   <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E6%83%85%E6%84%9F">情感</a>    <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E5%92%8F%E7%89%A9">咏物</a>     <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E5%94%90%E8%AF%97%E4%B8%89%E7%99%BE%E9%A6%96">唐诗三百首</a>    <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E6%80%9D%E5%BF%B5">思念</a>    <a href="https://hanyu.baidu.com/s?ptype=poem_tag&amp;about=%E6%8A%92%E6%83%85">抒情</a></p><p><a href="javascript:"><strong>译文</strong></a> <a href="javascript:"><strong>注释</strong></a></p><p>鲜红浑圆的红豆，生长在阳光明媚的南方，春暖花开的季节，不知又生出多少？希望思念的人儿多多采集，小小红豆引人相思。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 诗词歌赋 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/12/hello-world/"/>
      <url>2020/09/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
